// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using AzureAIAgents.Models;

namespace AzureAIAgents
{
    // Data plane generated sub-client.
    /// <summary> The Conversations sub-client. </summary>
    public partial class Conversations
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Conversations for mocking. </summary>
        protected Conversations()
        {
        }

        /// <summary> Initializes a new instance of Conversations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service host. </param>
        internal Conversations(ClientPipeline pipeline, Uri endpoint)
        {
            _pipeline = pipeline;
            _endpoint = endpoint;
        }

        /// <summary> Create a conversation. </summary>
        /// <param name="requestBody"> The <see cref="CreateConversationInput"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestBody"/> is null. </exception>
        /// <remarks> Create conversation. </remarks>
        public virtual async Task<ClientResult<ConversationObject>> CreateConversationAsync(CreateConversationInput requestBody)
        {
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = await CreateConversationAsync(content, null).ConfigureAwait(false);
            return ClientResult.FromValue(ConversationObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create a conversation. </summary>
        /// <param name="requestBody"> The <see cref="CreateConversationInput"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestBody"/> is null. </exception>
        /// <remarks> Create conversation. </remarks>
        public virtual ClientResult<ConversationObject> CreateConversation(CreateConversationInput requestBody)
        {
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = CreateConversation(content, null);
            return ClientResult.FromValue(ConversationObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversationAsync(CreateConversationInput)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CreateConversationAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationRequest(content, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Create a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversation(CreateConversationInput)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CreateConversation(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationRequest(content, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Retrieves a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get conversation. </remarks>
        public virtual async Task<ClientResult<ConversationObject>> GetConversationAsync(string conversationId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            ClientResult result = await GetConversationAsync(conversationId, null).ConfigureAwait(false);
            return ClientResult.FromValue(ConversationObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get conversation. </remarks>
        public virtual ClientResult<ConversationObject> GetConversation(string conversationId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            ClientResult result = GetConversation(conversationId, null);
            return ClientResult.FromValue(ConversationObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationAsync(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetConversationAsync(string conversationId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationRequest(conversationId, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Retrieves a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversation(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetConversation(string conversationId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationRequest(conversationId, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Deletes a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete conversation. </remarks>
        public virtual async Task<ClientResult<DeleteConversationResponse>> DeleteConversationAsync(string conversationId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            ClientResult result = await DeleteConversationAsync(conversationId, null).ConfigureAwait(false);
            return ClientResult.FromValue(DeleteConversationResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Deletes a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete conversation. </remarks>
        public virtual ClientResult<DeleteConversationResponse> DeleteConversation(string conversationId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            ClientResult result = DeleteConversation(conversationId, null);
            return ClientResult.FromValue(DeleteConversationResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Deletes a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteConversationAsync(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteConversationAsync(string conversationId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateDeleteConversationRequest(conversationId, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Deletes a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteConversation(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteConversation(string conversationId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateDeleteConversationRequest(conversationId, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Returns the list of all conversations. </summary>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <remarks> Get conversations. </remarks>
        public virtual async Task<ClientResult<ConversationList>> GetConversationsAsync(int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            ClientResult result = await GetConversationsAsync(limit, order?.ToSerialString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(ConversationList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns the list of all conversations. </summary>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <remarks> Get conversations. </remarks>
        public virtual ClientResult<ConversationList> GetConversations(int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            ClientResult result = GetConversations(limit, order?.ToSerialString(), after, before, null);
            return ClientResult.FromValue(ConversationList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns the list of all conversations.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationsAsync(int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetConversationsAsync(int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateGetConversationsRequest(limit, order, after, before, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Returns the list of all conversations.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversations(int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetConversations(int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateGetConversationsRequest(limit, order, after, before, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Create a conversation item. </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to be created. </param>
        /// <param name="requestBody"> The <see cref="ConversationItemInput"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="requestBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create conversation item. </remarks>
        public virtual async Task<ClientResult<ItemResource>> CreateConversationItemAsync(string conversationId, ConversationItemInput requestBody)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = await CreateConversationItemAsync(conversationId, content, null).ConfigureAwait(false);
            return ClientResult.FromValue(ItemResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create a conversation item. </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to be created. </param>
        /// <param name="requestBody"> The <see cref="ConversationItemInput"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="requestBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create conversation item. </remarks>
        public virtual ClientResult<ItemResource> CreateConversationItem(string conversationId, ConversationItemInput requestBody)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = CreateConversationItem(conversationId, content, null);
            return ClientResult.FromValue(ItemResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create a conversation item.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversationItemAsync(string,ConversationItemInput)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to be created. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CreateConversationItemAsync(string conversationId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationItemRequest(conversationId, content, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Create a conversation item.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversationItem(string,ConversationItemInput)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to be created. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CreateConversationItem(string conversationId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationItemRequest(conversationId, content, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Retrieves a conversation item. </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe retrieved from. </param>
        /// <param name="itemId"> The id of the conversation item to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get conversation item. </remarks>
        public virtual async Task<ClientResult<ItemResource>> GetConversationItemAsync(string conversationId, string itemId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            ClientResult result = await GetConversationItemAsync(conversationId, itemId, null).ConfigureAwait(false);
            return ClientResult.FromValue(ItemResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves a conversation item. </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe retrieved from. </param>
        /// <param name="itemId"> The id of the conversation item to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get conversation item. </remarks>
        public virtual ClientResult<ItemResource> GetConversationItem(string conversationId, string itemId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            ClientResult result = GetConversationItem(conversationId, itemId, null);
            return ClientResult.FromValue(ItemResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves a conversation item.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationItemAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe retrieved from. </param>
        /// <param name="itemId"> The id of the conversation item to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetConversationItemAsync(string conversationId, string itemId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateGetConversationItemRequest(conversationId, itemId, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Retrieves a conversation item.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationItem(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe retrieved from. </param>
        /// <param name="itemId"> The id of the conversation item to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetConversationItem(string conversationId, string itemId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateGetConversationItemRequest(conversationId, itemId, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Deletes a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe deleted from. </param>
        /// <param name="itemId"> The id of the conversation item to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete conversation item. </remarks>
        public virtual async Task<ClientResult<DeleteConversationItemResponse>> DeleteConversationItemAsync(string conversationId, string itemId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            ClientResult result = await DeleteConversationItemAsync(conversationId, itemId, null).ConfigureAwait(false);
            return ClientResult.FromValue(DeleteConversationItemResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Deletes a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe deleted from. </param>
        /// <param name="itemId"> The id of the conversation item to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete conversation item. </remarks>
        public virtual ClientResult<DeleteConversationItemResponse> DeleteConversationItem(string conversationId, string itemId)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            ClientResult result = DeleteConversationItem(conversationId, itemId, null);
            return ClientResult.FromValue(DeleteConversationItemResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Deletes a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteConversationItemAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe deleted from. </param>
        /// <param name="itemId"> The id of the conversation item to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteConversationItemAsync(string conversationId, string itemId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateDeleteConversationItemRequest(conversationId, itemId, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Deletes a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteConversationItem(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the item needs to tbe deleted from. </param>
        /// <param name="itemId"> The id of the conversation item to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteConversationItem(string conversationId, string itemId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateDeleteConversationItemRequest(conversationId, itemId, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Returns the list of all items in a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation on which the items needs to be listed. </param>
        /// <param name="itemType"> Filter by item type. If provided, only items of the specified type will be returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get conversation items. </remarks>
        public virtual async Task<ClientResult<ConversationItemList>> GetConversationItemsAsync(string conversationId, ItemType? itemType = null, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            ClientResult result = await GetConversationItemsAsync(conversationId, itemType?.ToString(), limit, order?.ToSerialString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(ConversationItemList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns the list of all items in a conversation. </summary>
        /// <param name="conversationId"> The id of the conversation on which the items needs to be listed. </param>
        /// <param name="itemType"> Filter by item type. If provided, only items of the specified type will be returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get conversation items. </remarks>
        public virtual ClientResult<ConversationItemList> GetConversationItems(string conversationId, ItemType? itemType = null, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            ClientResult result = GetConversationItems(conversationId, itemType?.ToString(), limit, order?.ToSerialString(), after, before, null);
            return ClientResult.FromValue(ConversationItemList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns the list of all items in a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationItemsAsync(string,global::AzureAIAgents.Models.ItemType?,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the items needs to be listed. </param>
        /// <param name="itemType"> Filter by item type. If provided, only items of the specified type will be returned. Allowed values: "message" | "file_search_call" | "function_call" | "function_call_output" | "computer_call" | "computer_call_output" | "web_search_call" | "reasoning" | "item_reference" | "image_generation_call" | "code_interpreter_call" | "local_shell_call" | "local_shell_call_output" | "mcp_list_tools" | "mcp_approval_request" | "mcp_approval_response" | "mcp_call". </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetConversationItemsAsync(string conversationId, string itemType, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationItemsRequest(conversationId, itemType, limit, order, after, before, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Returns the list of all items in a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationItems(string,global::AzureAIAgents.Models.ItemType?,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The id of the conversation on which the items needs to be listed. </param>
        /// <param name="itemType"> Filter by item type. If provided, only items of the specified type will be returned. Allowed values: "message" | "file_search_call" | "function_call" | "function_call_output" | "computer_call" | "computer_call_output" | "web_search_call" | "reasoning" | "item_reference" | "image_generation_call" | "code_interpreter_call" | "local_shell_call" | "local_shell_call_output" | "mcp_list_tools" | "mcp_approval_request" | "mcp_approval_response" | "mcp_call". </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetConversationItems(string conversationId, string itemType, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationItemsRequest(conversationId, itemType, limit, order, after, before, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        internal PipelineMessage CreateCreateConversationRequest(BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetConversationRequest(string conversationId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateDeleteConversationRequest(string conversationId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "DELETE";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetConversationsRequest(int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateCreateConversationItemRequest(string conversationId, BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/items", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetConversationItemRequest(string conversationId, string itemId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateDeleteConversationItemRequest(string conversationId, string itemId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "DELETE";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetConversationItemsRequest(string conversationId, string itemType, int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/items", false);
            if (itemType != null)
            {
                uri.AppendQuery("item_type", itemType, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier200;
        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}
