// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using AzureAIAgents.Models;

namespace AzureAIAgents
{
    // Data plane generated sub-client.
    /// <summary> The Agents sub-client. </summary>
    public partial class Agents
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Agents for mocking. </summary>
        protected Agents()
        {
        }

        /// <summary> Initializes a new instance of Agents. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service host. </param>
        internal Agents(ClientPipeline pipeline, Uri endpoint)
        {
            _pipeline = pipeline;
            _endpoint = endpoint;
        }

        /// <summary> Retrieves the agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent. </remarks>
        public virtual async Task<ClientResult<AgentObject>> GetAgentAsync(string agentName)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = await GetAgentAsync(agentName, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves the agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent. </remarks>
        public virtual ClientResult<AgentObject> GetAgent(string agentName)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = GetAgent(agentName, null);
            return ClientResult.FromValue(AgentObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves the agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentAsync(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentAsync(string agentName, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateGetAgentRequest(agentName, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Retrieves the agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgent(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgent(string agentName, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateGetAgentRequest(agentName, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Deletes a agent. </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete agent. </remarks>
        public virtual async Task<ClientResult<DeleteAgentResponse>> DeleteAgentAsync(string agentName)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = await DeleteAgentAsync(agentName, null).ConfigureAwait(false);
            return ClientResult.FromValue(DeleteAgentResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Deletes a agent. </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete agent. </remarks>
        public virtual ClientResult<DeleteAgentResponse> DeleteAgent(string agentName)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = DeleteAgent(agentName, null);
            return ClientResult.FromValue(DeleteAgentResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Deletes a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteAgentAsync(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteAgentAsync(string agentName, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateDeleteAgentRequest(agentName, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Deletes a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteAgent(string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteAgent(string agentName, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateDeleteAgentRequest(agentName, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Returns the list of all agents. </summary>
        /// <param name="kind"> Filter agents by kind. If not provided, all agents are returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <remarks> Get agents. </remarks>
        public virtual async Task<ClientResult<AgentList>> GetAgentsAsync(AgentKind? kind = null, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            ClientResult result = await GetAgentsAsync(kind?.ToSerialString(), limit, order?.ToSerialString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns the list of all agents. </summary>
        /// <param name="kind"> Filter agents by kind. If not provided, all agents are returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <remarks> Get agents. </remarks>
        public virtual ClientResult<AgentList> GetAgents(AgentKind? kind = null, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            ClientResult result = GetAgents(kind?.ToSerialString(), limit, order?.ToSerialString(), after, before, null);
            return ClientResult.FromValue(AgentList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns the list of all agents.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentsAsync(global::AzureAIAgents.Models.AgentKind?,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="kind"> Filter agents by kind. If not provided, all agents are returned. Allowed values: "prompt_agent" | "custom_agent" | "workflow". </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentsAsync(string kind, int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateGetAgentsRequest(kind, limit, order, after, before, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Returns the list of all agents.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgents(global::AzureAIAgents.Models.AgentKind?,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="kind"> Filter agents by kind. If not provided, all agents are returned. Allowed values: "prompt_agent" | "custom_agent" | "workflow". </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgents(string kind, int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateGetAgentsRequest(kind, limit, order, after, before, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Create a new agent version. </summary>
        /// <param name="agentName"> The name of the agent to create/modify. </param>
        /// <param name="requestBody"> The <see cref="CreateAgentVersionRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="requestBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create agent version. </remarks>
        public virtual async Task<ClientResult<AgentVersionObject>> CreateAgentVersionAsync(string agentName, CreateAgentVersionRequest requestBody)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = await CreateAgentVersionAsync(agentName, content, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentVersionObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create a new agent version. </summary>
        /// <param name="agentName"> The name of the agent to create/modify. </param>
        /// <param name="requestBody"> The <see cref="CreateAgentVersionRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="requestBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create agent version. </remarks>
        public virtual ClientResult<AgentVersionObject> CreateAgentVersion(string agentName, CreateAgentVersionRequest requestBody)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = CreateAgentVersion(agentName, content, null);
            return ClientResult.FromValue(AgentVersionObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create a new agent version.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAgentVersionAsync(string,CreateAgentVersionRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to create/modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CreateAgentVersionAsync(string agentName, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateAgentVersionRequest(agentName, content, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Create a new agent version.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAgentVersion(string,CreateAgentVersionRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to create/modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CreateAgentVersion(string agentName, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateAgentVersionRequest(agentName, content, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Retrieves a specific version of a agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <param name="agentVersion"> The version of the agent to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent version. </remarks>
        public virtual async Task<ClientResult<AgentVersionObject>> GetAgentVersionAsync(string agentName, string agentVersion)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            ClientResult result = await GetAgentVersionAsync(agentName, agentVersion, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentVersionObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves a specific version of a agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <param name="agentVersion"> The version of the agent to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent version. </remarks>
        public virtual ClientResult<AgentVersionObject> GetAgentVersion(string agentName, string agentVersion)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            ClientResult result = GetAgentVersion(agentName, agentVersion, null);
            return ClientResult.FromValue(AgentVersionObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves a specific version of a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentVersionAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <param name="agentVersion"> The version of the agent to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentVersionAsync(string agentName, string agentVersion, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            using PipelineMessage message = CreateGetAgentVersionRequest(agentName, agentVersion, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Retrieves a specific version of a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentVersion(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve. </param>
        /// <param name="agentVersion"> The version of the agent to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgentVersion(string agentName, string agentVersion, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            using PipelineMessage message = CreateGetAgentVersionRequest(agentName, agentVersion, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Deletes a specific version of a agent. Deleting an agent with user-defined labels is not allowed and will result in bad request. </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <param name="agentVersion"> The version of the agent to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete agent version. </remarks>
        public virtual async Task<ClientResult<DeleteAgentVersionResponse>> DeleteAgentVersionAsync(string agentName, string agentVersion)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            ClientResult result = await DeleteAgentVersionAsync(agentName, agentVersion, null).ConfigureAwait(false);
            return ClientResult.FromValue(DeleteAgentVersionResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Deletes a specific version of a agent. Deleting an agent with user-defined labels is not allowed and will result in bad request. </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <param name="agentVersion"> The version of the agent to delete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete agent version. </remarks>
        public virtual ClientResult<DeleteAgentVersionResponse> DeleteAgentVersion(string agentName, string agentVersion)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            ClientResult result = DeleteAgentVersion(agentName, agentVersion, null);
            return ClientResult.FromValue(DeleteAgentVersionResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Deletes a specific version of a agent. Deleting an agent with user-defined labels is not allowed and will result in bad request.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteAgentVersionAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <param name="agentVersion"> The version of the agent to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteAgentVersionAsync(string agentName, string agentVersion, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            using PipelineMessage message = CreateDeleteAgentVersionRequest(agentName, agentVersion, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Deletes a specific version of a agent. Deleting an agent with user-defined labels is not allowed and will result in bad request.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteAgentVersion(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to delete. </param>
        /// <param name="agentVersion"> The version of the agent to delete. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="agentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteAgentVersion(string agentName, string agentVersion, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(agentVersion, nameof(agentVersion));

            using PipelineMessage message = CreateDeleteAgentVersionRequest(agentName, agentVersion, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Returns the list of versions of a agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve versions for. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent versions. </remarks>
        public virtual async Task<ClientResult<AgentVersionList>> GetAgentVersionsAsync(string agentName, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = await GetAgentVersionsAsync(agentName, limit, order?.ToSerialString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentVersionList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns the list of versions of a agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve versions for. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent versions. </remarks>
        public virtual ClientResult<AgentVersionList> GetAgentVersions(string agentName, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = GetAgentVersions(agentName, limit, order?.ToSerialString(), after, before, null);
            return ClientResult.FromValue(AgentVersionList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns the list of versions of a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentVersionsAsync(string,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve versions for. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentVersionsAsync(string agentName, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateGetAgentVersionsRequest(agentName, limit, order, after, before, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Returns the list of versions of a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentVersions(string,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve versions for. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgentVersions(string agentName, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateGetAgentVersionsRequest(agentName, limit, order, after, before, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Create/Update/Remove a label association for agent versions. </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to create/modify. </param>
        /// <param name="requestBody"> The <see cref="UpsertAgentLabelRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/>, <paramref name="labelName"/> or <paramref name="requestBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Create/Update/Remove a label association for agent versions.
        /// - If the label does not exist, it will be created.
        /// - If version association is NOT specified, the label will be disassociated from the any agent version it was previously associated with.
        /// - If version association is specified, then it will be updated to associate with the specified version and any previous vesrion associations will be removed.
        ///
        /// System labels are reserved labels that have specific meanings and behavior:
        /// - `$latest`: This label is automatically assigned to the latest version of the agent. This label cannot be created or modified by users.
        /// - `$default`: The **$default** label by default always points to latest version of the agent. However, user can change this behaviour by explicitly seting $default label on a different version. If user unassigns the $default label, it will revert back to he default behaviour of pointing to latest version.
        /// </remarks>
        public virtual async Task<ClientResult<AgentLabelObject>> UpsertAgentLabelAsync(string agentName, string labelName, UpsertAgentLabelRequest requestBody)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = await UpsertAgentLabelAsync(agentName, labelName, content, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentLabelObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create/Update/Remove a label association for agent versions. </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to create/modify. </param>
        /// <param name="requestBody"> The <see cref="UpsertAgentLabelRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/>, <paramref name="labelName"/> or <paramref name="requestBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Create/Update/Remove a label association for agent versions.
        /// - If the label does not exist, it will be created.
        /// - If version association is NOT specified, the label will be disassociated from the any agent version it was previously associated with.
        /// - If version association is specified, then it will be updated to associate with the specified version and any previous vesrion associations will be removed.
        ///
        /// System labels are reserved labels that have specific meanings and behavior:
        /// - `$latest`: This label is automatically assigned to the latest version of the agent. This label cannot be created or modified by users.
        /// - `$default`: The **$default** label by default always points to latest version of the agent. However, user can change this behaviour by explicitly seting $default label on a different version. If user unassigns the $default label, it will revert back to he default behaviour of pointing to latest version.
        /// </remarks>
        public virtual ClientResult<AgentLabelObject> UpsertAgentLabel(string agentName, string labelName, UpsertAgentLabelRequest requestBody)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            using BinaryContent content = requestBody.ToBinaryContent();
            ClientResult result = UpsertAgentLabel(agentName, labelName, content, null);
            return ClientResult.FromValue(AgentLabelObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create/Update/Remove a label association for agent versions.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpsertAgentLabelAsync(string,string,UpsertAgentLabelRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to create/modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/>, <paramref name="labelName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> UpsertAgentLabelAsync(string agentName, string labelName, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpsertAgentLabelRequest(agentName, labelName, content, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Create/Update/Remove a label association for agent versions.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpsertAgentLabel(string,string,UpsertAgentLabelRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to create/modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/>, <paramref name="labelName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult UpsertAgentLabel(string agentName, string labelName, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpsertAgentLabelRequest(agentName, labelName, content, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Retrieves a specific label of an agent. </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent label. </remarks>
        public virtual async Task<ClientResult<AgentLabelObject>> GetAgentLabelAsync(string agentName, string labelName)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            ClientResult result = await GetAgentLabelAsync(agentName, labelName, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentLabelObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves a specific label of an agent. </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent label. </remarks>
        public virtual ClientResult<AgentLabelObject> GetAgentLabel(string agentName, string labelName)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            ClientResult result = GetAgentLabel(agentName, labelName, null);
            return ClientResult.FromValue(AgentLabelObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves a specific label of an agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentLabelAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentLabelAsync(string agentName, string labelName, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            using PipelineMessage message = CreateGetAgentLabelRequest(agentName, labelName, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Retrieves a specific label of an agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentLabel(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgentLabel(string agentName, string labelName, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            using PipelineMessage message = CreateGetAgentLabelRequest(agentName, labelName, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Retrieves the change log for a specific label of an agent. </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent label change log. </remarks>
        public virtual async Task<ClientResult<AgentLabelList>> GetAgentLabelChangeLogAsync(string agentName, string labelName, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            ClientResult result = await GetAgentLabelChangeLogAsync(agentName, labelName, limit, order?.ToSerialString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentLabelList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves the change log for a specific label of an agent. </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent label change log. </remarks>
        public virtual ClientResult<AgentLabelList> GetAgentLabelChangeLog(string agentName, string labelName, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            ClientResult result = GetAgentLabelChangeLog(agentName, labelName, limit, order?.ToSerialString(), after, before, null);
            return ClientResult.FromValue(AgentLabelList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves the change log for a specific label of an agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentLabelChangeLogAsync(string,string,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentLabelChangeLogAsync(string agentName, string labelName, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            using PipelineMessage message = CreateGetAgentLabelChangeLogRequest(agentName, labelName, limit, order, after, before, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Retrieves the change log for a specific label of an agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentLabelChangeLog(string,string,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent. </param>
        /// <param name="labelName"> The name of the label to retrieve. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> or <paramref name="labelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> or <paramref name="labelName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgentLabelChangeLog(string agentName, string labelName, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));
            Argument.AssertNotNullOrEmpty(labelName, nameof(labelName));

            using PipelineMessage message = CreateGetAgentLabelChangeLogRequest(agentName, labelName, limit, order, after, before, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Returns the list of labels of a agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve labels for. </param>
        /// <param name="agentVersion"> Filter labels by agent version. If not provided, all labels of a an agent are returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent labels. </remarks>
        public virtual async Task<ClientResult<AgentLabelList>> GetAgentLabelsAsync(string agentName, string agentVersion = null, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = await GetAgentLabelsAsync(agentName, agentVersion, limit, order?.ToSerialString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(AgentLabelList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns the list of labels of a agent. </summary>
        /// <param name="agentName"> The name of the agent to retrieve labels for. </param>
        /// <param name="agentVersion"> Filter labels by agent version. If not provided, all labels of a an agent are returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get agent labels. </remarks>
        public virtual ClientResult<AgentLabelList> GetAgentLabels(string agentName, string agentVersion = null, int? limit = null, ListConversationsRequestOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            ClientResult result = GetAgentLabels(agentName, agentVersion, limit, order?.ToSerialString(), after, before, null);
            return ClientResult.FromValue(AgentLabelList.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns the list of labels of a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentLabelsAsync(string,string,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve labels for. </param>
        /// <param name="agentVersion"> Filter labels by agent version. If not provided, all labels of a an agent are returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetAgentLabelsAsync(string agentName, string agentVersion, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateGetAgentLabelsRequest(agentName, agentVersion, limit, order, after, before, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Returns the list of labels of a agent.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentLabels(string,string,int?,global::AzureAIAgents.Models.ListConversationsRequestOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentName"> The name of the agent to retrieve labels for. </param>
        /// <param name="agentVersion"> Filter labels by agent version. If not provided, all labels of a an agent are returned. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetAgentLabels(string agentName, string agentVersion, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(agentName, nameof(agentName));

            using PipelineMessage message = CreateGetAgentLabelsRequest(agentName, agentVersion, limit, order, after, before, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        internal PipelineMessage CreateGetAgentRequest(string agentName, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateDeleteAgentRequest(string agentName, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "DELETE";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetAgentsRequest(string kind, int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents", false);
            if (kind != null)
            {
                uri.AppendQuery("kind", kind, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateCreateAgentVersionRequest(string agentName, BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/versions", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetAgentVersionRequest(string agentName, string agentVersion, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(agentVersion, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateDeleteAgentVersionRequest(string agentName, string agentVersion, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "DELETE";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(agentVersion, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetAgentVersionsRequest(string agentName, int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/versions", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateUpsertAgentLabelRequest(string agentName, string labelName, BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/labels/", false);
            uri.AppendPath(labelName, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetAgentLabelRequest(string agentName, string labelName, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/labels/", false);
            uri.AppendPath(labelName, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetAgentLabelChangeLogRequest(string agentName, string labelName, int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/labels/", false);
            uri.AppendPath(labelName, true);
            uri.AppendPath("/changelog", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetAgentLabelsRequest(string agentName, string agentVersion, int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentName, true);
            uri.AppendPath("/labels", false);
            if (agentVersion != null)
            {
                uri.AppendQuery("agent_version", agentVersion, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier200;
        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}
