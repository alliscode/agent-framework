// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AzureAIAgentsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.LocalShellExecAction"/>. </summary>
        /// <param name="type"> The type of the local shell action. Always `exec`. </param>
        /// <param name="command"> The command to run. </param>
        /// <param name="timeoutMs"> Optional timeout in milliseconds for the command. </param>
        /// <param name="workingDirectory"> Optional working directory to run the command in. </param>
        /// <param name="env"> Environment variables to set for the command. </param>
        /// <param name="user"> Optional user to run the command as. </param>
        /// <returns> A new <see cref="Models.LocalShellExecAction"/> instance for mocking. </returns>
        public static LocalShellExecAction LocalShellExecAction(LocalShellExecActionType type = default, IEnumerable<string> command = null, int? timeoutMs = null, string workingDirectory = null, IDictionary<string, string> env = null, string user = null)
        {
            command ??= new List<string>();
            env ??= new Dictionary<string, string>();

            return new LocalShellExecAction(
                type,
                command?.ToList(),
                timeoutMs,
                workingDirectory,
                env,
                user,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationObject"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="createdAt"> The Unix timestamp (seconds) when the conversation was created. </param>
        /// <param name="metadata"></param>
        /// <returns> A new <see cref="Models.ConversationObject"/> instance for mocking. </returns>
        public static ConversationObject ConversationObject(ConversationObjectObject @object = default, string id = null, DateTimeOffset createdAt = default, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new ConversationObject(@object, id, createdAt, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteConversationResponse"/>. </summary>
        /// <param name="object"> The object type. Always 'conversation.deleted'. </param>
        /// <param name="id"> The id of the conversation. </param>
        /// <param name="deleted"> Whether the conversation was successfully deleted. </param>
        /// <returns> A new <see cref="Models.DeleteConversationResponse"/> instance for mocking. </returns>
        public static DeleteConversationResponse DeleteConversationResponse(DeleteConversationResponseObject @object = default, string id = null, bool deleted = default)
        {
            return new DeleteConversationResponse(@object, id, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationList"/>. </summary>
        /// <param name="data"> A list of items used to generate this response. </param>
        /// <param name="object"> The object type. Always 'list'. </param>
        /// <param name="firstId"> ID of the first item in the returned page. </param>
        /// <param name="lastId"> ID of the last item in the returned page. </param>
        /// <param name="hasMore"> Whether more items are available after this page. </param>
        /// <returns> A new <see cref="Models.ConversationList"/> instance for mocking. </returns>
        public static ConversationList ConversationList(IEnumerable<ConversationObject> data = null, ConversationListObject @object = default, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<ConversationObject>();

            return new ConversationList(
                data?.ToList(),
                @object,
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ItemResource"/>. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <returns> A new <see cref="Models.ItemResource"/> instance for mocking. </returns>
        public static ItemResource ItemResource(string type = null, string id = null)
        {
            return new UnknownItemResource(type == null ? default : new ItemType(type), id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputerToolCallOutputItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="callId"> The ID of the computer tool call that produced the output. </param>
        /// <param name="acknowledgedSafetyChecks">
        /// The safety checks reported by the API that have been acknowledged by the
        /// developer.
        /// </param>
        /// <param name="output">
        /// Please note <see cref="ComputerToolCallOutputItemOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerToolCallOutputItemOutputComputerScreenshot"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ComputerToolCallOutputItemResource"/> instance for mocking. </returns>
        public static ComputerToolCallOutputItemResource ComputerToolCallOutputItemResource(string id = null, ComputerToolCallOutputItemResourceStatus status = default, string callId = null, IEnumerable<ComputerToolCallSafetyCheck> acknowledgedSafetyChecks = null, ComputerToolCallOutputItemOutput output = null)
        {
            acknowledgedSafetyChecks ??= new List<ComputerToolCallSafetyCheck>();

            return new ComputerToolCallOutputItemResource(
                ItemType.ComputerCallOutput,
                id,
                serializedAdditionalRawData: null,
                status,
                callId,
                acknowledgedSafetyChecks?.ToList(),
                output);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FunctionToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="callId"> The unique ID of the function tool call generated by the model. </param>
        /// <param name="name"> The name of the function to run. </param>
        /// <param name="arguments"> A JSON string of the arguments to pass to the function. </param>
        /// <returns> A new <see cref="Models.FunctionToolCallItemResource"/> instance for mocking. </returns>
        public static FunctionToolCallItemResource FunctionToolCallItemResource(string id = null, FunctionToolCallItemResourceStatus status = default, string callId = null, string name = null, string arguments = null)
        {
            return new FunctionToolCallItemResource(
                ItemType.FunctionCall,
                id,
                serializedAdditionalRawData: null,
                status,
                callId,
                name,
                arguments);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FunctionToolCallOutputItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="callId"> The unique ID of the function tool call generated by the model. </param>
        /// <param name="output"> A JSON string of the output of the function tool call. </param>
        /// <returns> A new <see cref="Models.FunctionToolCallOutputItemResource"/> instance for mocking. </returns>
        public static FunctionToolCallOutputItemResource FunctionToolCallOutputItemResource(string id = null, FunctionToolCallOutputItemResourceStatus status = default, string callId = null, string output = null)
        {
            return new FunctionToolCallOutputItemResource(
                ItemType.FunctionCallOutput,
                id,
                serializedAdditionalRawData: null,
                status,
                callId,
                output);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MCPApprovalResponseItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="approvalRequestId"> The ID of the approval request being answered. </param>
        /// <param name="approve"> Whether the request was approved. </param>
        /// <param name="reason"> Optional reason for the decision. </param>
        /// <returns> A new <see cref="Models.MCPApprovalResponseItemResource"/> instance for mocking. </returns>
        public static MCPApprovalResponseItemResource MCPApprovalResponseItemResource(string id = null, string approvalRequestId = null, bool approve = default, string reason = null)
        {
            return new MCPApprovalResponseItemResource(
                ItemType.McpApprovalResponse,
                id,
                serializedAdditionalRawData: null,
                approvalRequestId,
                approve,
                reason);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FileSearchToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status">
        /// The status of the file search tool call. One of `in_progress`,
        /// `searching`, `incomplete` or `failed`,
        /// </param>
        /// <param name="queries"> The queries used to search for files. </param>
        /// <param name="results"> The results of the file search tool call. </param>
        /// <returns> A new <see cref="Models.FileSearchToolCallItemResource"/> instance for mocking. </returns>
        public static FileSearchToolCallItemResource FileSearchToolCallItemResource(string id = null, FileSearchToolCallItemResourceStatus status = default, IEnumerable<string> queries = null, IEnumerable<FileSearchToolCallItemParamResult> results = null)
        {
            queries ??= new List<string>();
            results ??= new List<FileSearchToolCallItemParamResult>();

            return new FileSearchToolCallItemResource(
                ItemType.FileSearchCall,
                id,
                serializedAdditionalRawData: null,
                status,
                queries?.ToList(),
                results?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputerToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="callId"> An identifier used when responding to the tool call with output. </param>
        /// <param name="action">
        /// Please note <see cref="ComputerAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerActionClick"/>, <see cref="ComputerActionDoubleClick"/>, <see cref="ComputerActionDrag"/>, <see cref="ComputerActionKeyPress"/>, <see cref="ComputerActionMove"/>, <see cref="ComputerActionScreenshot"/>, <see cref="ComputerActionScroll"/>, <see cref="ComputerActionTypeKeys"/> and <see cref="ComputerActionWait"/>.
        /// </param>
        /// <param name="pendingSafetyChecks"> The pending safety checks for the computer call. </param>
        /// <returns> A new <see cref="Models.ComputerToolCallItemResource"/> instance for mocking. </returns>
        public static ComputerToolCallItemResource ComputerToolCallItemResource(string id = null, ComputerToolCallItemResourceStatus status = default, string callId = null, ComputerAction action = null, IEnumerable<ComputerToolCallSafetyCheck> pendingSafetyChecks = null)
        {
            pendingSafetyChecks ??= new List<ComputerToolCallSafetyCheck>();

            return new ComputerToolCallItemResource(
                ItemType.ComputerCall,
                id,
                serializedAdditionalRawData: null,
                status,
                callId,
                action,
                pendingSafetyChecks?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.WebSearchToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status"> The status of the web search tool call. </param>
        /// <param name="action">
        /// An object describing the specific action taken in this web search call.
        /// Includes details on how the model used the web (search, open_page, find).
        /// Please note <see cref="WebSearchAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WebSearchActionFind"/>, <see cref="WebSearchActionOpenPage"/> and <see cref="WebSearchActionSearch"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebSearchToolCallItemResource"/> instance for mocking. </returns>
        public static WebSearchToolCallItemResource WebSearchToolCallItemResource(string id = null, WebSearchToolCallItemResourceStatus status = default, WebSearchAction action = null)
        {
            return new WebSearchToolCallItemResource(ItemType.WebSearchCall, id, serializedAdditionalRawData: null, status, action);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReasoningItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="encryptedContent">
        /// The encrypted content of the reasoning item - populated when a response is
        /// generated with `reasoning.encrypted_content` in the `include` parameter.
        /// </param>
        /// <param name="summary">
        /// Reasoning text contents.
        /// Please note <see cref="ReasoningItemSummaryPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReasoningItemSummaryTextPart"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ReasoningItemResource"/> instance for mocking. </returns>
        public static ReasoningItemResource ReasoningItemResource(string id = null, string encryptedContent = null, IEnumerable<ReasoningItemSummaryPart> summary = null)
        {
            summary ??= new List<ReasoningItemSummaryPart>();

            return new ReasoningItemResource(ItemType.Reasoning, id, serializedAdditionalRawData: null, encryptedContent, summary?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImageGenToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <param name="result"> The generated image encoded in base64. </param>
        /// <returns> A new <see cref="Models.ImageGenToolCallItemResource"/> instance for mocking. </returns>
        public static ImageGenToolCallItemResource ImageGenToolCallItemResource(string id = null, ImageGenToolCallItemResourceStatus status = default, string result = null)
        {
            return new ImageGenToolCallItemResource(ItemType.ImageGenerationCall, id, serializedAdditionalRawData: null, status, result);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CodeInterpreterToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <param name="containerId"> The ID of the container used to run the code. </param>
        /// <param name="code"> The code to run, or null if not available. </param>
        /// <param name="outputs">
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </param>
        /// <returns> A new <see cref="Models.CodeInterpreterToolCallItemResource"/> instance for mocking. </returns>
        public static CodeInterpreterToolCallItemResource CodeInterpreterToolCallItemResource(string id = null, CodeInterpreterToolCallItemResourceStatus status = default, string containerId = null, string code = null, IEnumerable<CodeInterpreterOutput> outputs = null)
        {
            outputs ??= new List<CodeInterpreterOutput>();

            return new CodeInterpreterToolCallItemResource(
                ItemType.CodeInterpreterCall,
                id,
                serializedAdditionalRawData: null,
                status,
                containerId,
                code,
                outputs?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.LocalShellToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <param name="callId"> The unique ID of the local shell tool call generated by the model. </param>
        /// <param name="action"></param>
        /// <returns> A new <see cref="Models.LocalShellToolCallItemResource"/> instance for mocking. </returns>
        public static LocalShellToolCallItemResource LocalShellToolCallItemResource(string id = null, LocalShellToolCallItemResourceStatus status = default, string callId = null, LocalShellExecAction action = null)
        {
            return new LocalShellToolCallItemResource(
                ItemType.LocalShellCall,
                id,
                serializedAdditionalRawData: null,
                status,
                callId,
                action);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LocalShellToolCallOutputItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <param name="output"> A JSON string of the output of the local shell tool call. </param>
        /// <returns> A new <see cref="Models.LocalShellToolCallOutputItemResource"/> instance for mocking. </returns>
        public static LocalShellToolCallOutputItemResource LocalShellToolCallOutputItemResource(string id = null, LocalShellToolCallOutputItemResourceStatus status = default, string output = null)
        {
            return new LocalShellToolCallOutputItemResource(ItemType.LocalShellCallOutput, id, serializedAdditionalRawData: null, status, output);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MCPListToolsItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="serverLabel"> The label of the MCP server. </param>
        /// <param name="tools"> The tools available on the server. </param>
        /// <param name="error"> Error message if the server could not list tools. </param>
        /// <returns> A new <see cref="Models.MCPListToolsItemResource"/> instance for mocking. </returns>
        public static MCPListToolsItemResource MCPListToolsItemResource(string id = null, string serverLabel = null, IEnumerable<MCPListToolsTool> tools = null, string error = null)
        {
            tools ??= new List<MCPListToolsTool>();

            return new MCPListToolsItemResource(
                ItemType.McpListTools,
                id,
                serializedAdditionalRawData: null,
                serverLabel,
                tools?.ToList(),
                error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MCPApprovalRequestItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="serverLabel"> The label of the MCP server making the request. </param>
        /// <param name="name"> The name of the tool to run. </param>
        /// <param name="arguments"> A JSON string of arguments for the tool. </param>
        /// <returns> A new <see cref="Models.MCPApprovalRequestItemResource"/> instance for mocking. </returns>
        public static MCPApprovalRequestItemResource MCPApprovalRequestItemResource(string id = null, string serverLabel = null, string name = null, string arguments = null)
        {
            return new MCPApprovalRequestItemResource(
                ItemType.McpApprovalRequest,
                id,
                serializedAdditionalRawData: null,
                serverLabel,
                name,
                arguments);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MCPCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="serverLabel"> The label of the MCP server running the tool. </param>
        /// <param name="name"> The name of the tool that was run. </param>
        /// <param name="arguments"> A JSON string of the arguments passed to the tool. </param>
        /// <param name="output"> The output from the tool call. </param>
        /// <param name="error"> The error from the tool call, if any. </param>
        /// <returns> A new <see cref="Models.MCPCallItemResource"/> instance for mocking. </returns>
        public static MCPCallItemResource MCPCallItemResource(string id = null, string serverLabel = null, string name = null, string arguments = null, string output = null, string error = null)
        {
            return new MCPCallItemResource(
                ItemType.McpCall,
                id,
                serializedAdditionalRawData: null,
                serverLabel,
                name,
                arguments,
                output,
                error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StructuredInputsItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="inputs"> The structured inputs provided to the response. </param>
        /// <returns> A new <see cref="Models.StructuredInputsItemResource"/> instance for mocking. </returns>
        public static StructuredInputsItemResource StructuredInputsItemResource(string id = null, IReadOnlyDictionary<string, BinaryData> inputs = null)
        {
            inputs ??= new Dictionary<string, BinaryData>();

            return new StructuredInputsItemResource(new ItemType("structured_inputs"), id, serializedAdditionalRawData: null, inputs);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StructuredOutputsItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="outputs"> The structured outputs captured during the response. </param>
        /// <returns> A new <see cref="Models.StructuredOutputsItemResource"/> instance for mocking. </returns>
        public static StructuredOutputsItemResource StructuredOutputsItemResource(string id = null, IReadOnlyDictionary<string, BinaryData> outputs = null)
        {
            outputs ??= new Dictionary<string, BinaryData>();

            return new StructuredOutputsItemResource(new ItemType("structured_outputs"), id, serializedAdditionalRawData: null, outputs);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SemanticEventsOutputItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"> The name of the semantic event. </param>
        /// <returns> A new <see cref="Models.SemanticEventsOutputItemResource"/> instance for mocking. </returns>
        public static SemanticEventsOutputItemResource SemanticEventsOutputItemResource(string id = null, string name = null)
        {
            return new SemanticEventsOutputItemResource(new ItemType("semantic_event"), id, serializedAdditionalRawData: null, name);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentId"/>. </summary>
        /// <param name="type"></param>
        /// <param name="name"> The name of the agent. </param>
        /// <param name="version"> The version identifier of the agent. </param>
        /// <returns> A new <see cref="Models.AgentId"/> instance for mocking. </returns>
        public static AgentId AgentId(AgentIdType type = default, string name = null, string version = null)
        {
            return new AgentId(type, name, version, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteConversationItemResponse"/>. </summary>
        /// <param name="object"> The object type. Always 'conversation.item.deleted'. </param>
        /// <param name="id"> The id of the conversation item. </param>
        /// <param name="deleted"> Whether the conversation item was successfully deleted. </param>
        /// <returns> A new <see cref="Models.DeleteConversationItemResponse"/> instance for mocking. </returns>
        public static DeleteConversationItemResponse DeleteConversationItemResponse(DeleteConversationItemResponseObject @object = default, string id = null, bool deleted = default)
        {
            return new DeleteConversationItemResponse(@object, id, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationItemList"/>. </summary>
        /// <param name="data">
        /// A list of items used to generate this response.
        /// Please note <see cref="Models.ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="Models.CodeInterpreterToolCallItemResource"/>, <see cref="Models.ComputerToolCallItemResource"/>, <see cref="Models.ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="Models.FileSearchToolCallItemResource"/>, <see cref="Models.FunctionToolCallItemResource"/>, <see cref="Models.FunctionToolCallOutputItemResource"/>, <see cref="Models.ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="Models.LocalShellToolCallItemResource"/>, <see cref="Models.LocalShellToolCallOutputItemResource"/>, <see cref="Models.MCPApprovalRequestItemResource"/>, <see cref="Models.MCPApprovalResponseItemResource"/>, <see cref="Models.MCPCallItemResource"/>, <see cref="Models.MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="Models.ReasoningItemResource"/>, <see cref="Models.SemanticEventsOutputItemResource"/>, <see cref="Models.StructuredInputsItemResource"/>, <see cref="Models.StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="Models.WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <param name="object"> The object type. Always 'list'. </param>
        /// <param name="firstId"> ID of the first item in the returned page. </param>
        /// <param name="lastId"> ID of the last item in the returned page. </param>
        /// <param name="hasMore"> Whether more items are available after this page. </param>
        /// <returns> A new <see cref="Models.ConversationItemList"/> instance for mocking. </returns>
        public static ConversationItemList ConversationItemList(IEnumerable<ItemResource> data = null, ConversationItemListObject @object = default, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<ItemResource>();

            return new ConversationItemList(
                data?.ToList(),
                @object,
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentObject"/>. </summary>
        /// <param name="object"> The object type, which is always 'agent'. </param>
        /// <param name="id"> The unique identifier of the agent. </param>
        /// <param name="name"> The name of the agent. </param>
        /// <param name="labels"> The labels and their version associations for this agent. </param>
        /// <returns> A new <see cref="Models.AgentObject"/> instance for mocking. </returns>
        public static AgentObject AgentObject(AgentObjectObject @object = default, string id = null, string name = null, IEnumerable<AgentLabelObject> labels = null)
        {
            labels ??= new List<AgentLabelObject>();

            return new AgentObject(@object, id, name, labels?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentLabelObject"/>. </summary>
        /// <param name="object"> The object type, which is always 'agent.label'. </param>
        /// <param name="id"> The unique identifier of the label. Every label update results in a new label ID. </param>
        /// <param name="name"> The name of the label. </param>
        /// <param name="createdAt"> The Unix timestamp (seconds) when the label was created. </param>
        /// <param name="agentVersion"> The version of the agent that this label is associated with. If not provided, then the label is not associated with any specific version. </param>
        /// <returns> A new <see cref="Models.AgentLabelObject"/> instance for mocking. </returns>
        public static AgentLabelObject AgentLabelObject(AgentLabelObjectObject @object = default, string id = null, string name = null, DateTimeOffset createdAt = default, string agentVersion = null)
        {
            return new AgentLabelObject(
                @object,
                id,
                name,
                createdAt,
                agentVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Error"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="details"></param>
        /// <param name="errors"></param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(string code = null, string message = null, string details = null, IReadOnlyDictionary<string, IList<string>> errors = null)
        {
            errors ??= new Dictionary<string, IList<string>>();

            return new Error(code, message, details, errors, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteAgentResponse"/>. </summary>
        /// <param name="object"> The object type. Always 'agent.deleted'. </param>
        /// <param name="name"> The name of the agent. </param>
        /// <param name="deleted"> Whether the agent was successfully deleted. </param>
        /// <returns> A new <see cref="Models.DeleteAgentResponse"/> instance for mocking. </returns>
        public static DeleteAgentResponse DeleteAgentResponse(DeleteAgentResponseObject @object = default, string name = null, bool deleted = default)
        {
            return new DeleteAgentResponse(@object, name, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentList"/>. </summary>
        /// <param name="data"> A list of items used to generate this response. </param>
        /// <param name="object"> The object type. Always 'list'. </param>
        /// <param name="firstId"> ID of the first item in the returned page. </param>
        /// <param name="lastId"> ID of the last item in the returned page. </param>
        /// <param name="hasMore"> Whether more items are available after this page. </param>
        /// <returns> A new <see cref="Models.AgentList"/> instance for mocking. </returns>
        public static AgentList AgentList(IEnumerable<AgentObject> data = null, AgentListObject @object = default, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<AgentObject>();

            return new AgentList(
                data?.ToList(),
                @object,
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateAgentVersionRequest"/>. </summary>
        /// <param name="description"> A human-readable description of the agent. </param>
        /// <param name="metadata"> Arbitrary key-value metadata to associate with the agent. </param>
        /// <param name="definition">
        /// The agent definition. This can be a workflow, custom agent, or a simple agent definition.
        /// Please note <see cref="AgentDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomAgentDefinition"/>, <see cref="PromptAgentDefinition"/> and <see cref="WorkflowDefinition"/>.
        /// </param>
        /// <returns> A new <see cref="Models.CreateAgentVersionRequest"/> instance for mocking. </returns>
        public static CreateAgentVersionRequest CreateAgentVersionRequest(string description = null, IDictionary<string, string> metadata = null, AgentDefinition definition = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new CreateAgentVersionRequest(description, metadata, definition, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CodeInterpreterToolAuto"/>. </summary>
        /// <param name="type"> Always `auto`. </param>
        /// <param name="fileIds"> An optional list of uploaded files to make available to your code. </param>
        /// <returns> A new <see cref="Models.CodeInterpreterToolAuto"/> instance for mocking. </returns>
        public static CodeInterpreterToolAuto CodeInterpreterToolAuto(CodeInterpreterToolAutoType type = default, IEnumerable<string> fileIds = null)
        {
            fileIds ??= new List<string>();

            return new CodeInterpreterToolAuto(type, fileIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentVersionObject"/>. </summary>
        /// <param name="object"> The object type, which is always 'agent.version'. </param>
        /// <param name="id"> The unique identifier of the agent version. </param>
        /// <param name="name"> The name of the agent. Name can be used to retrieve/update/delete the agent. </param>
        /// <param name="version"> The version identifier of the agent. Agents are immutable and every update creates a new version while keeping the name same. </param>
        /// <param name="description"> A human-readable description of the agent. </param>
        /// <param name="metadata"> Arbitrary key-value metadata to associate with the agent. </param>
        /// <param name="createdAt"> The Unix timestamp (seconds) when the agent was created. </param>
        /// <param name="labels"> The labels associated with this version of the agent. Labels are used to mark specific versions of the agent for easy retrieval. </param>
        /// <param name="status"> The status of agent. </param>
        /// <param name="definition">
        /// Please note <see cref="AgentDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomAgentDefinition"/>, <see cref="PromptAgentDefinition"/> and <see cref="WorkflowDefinition"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AgentVersionObject"/> instance for mocking. </returns>
        public static AgentVersionObject AgentVersionObject(AgentVersionObjectObject @object = default, string id = null, string name = null, string version = null, string description = null, IReadOnlyDictionary<string, string> metadata = null, DateTimeOffset createdAt = default, IEnumerable<string> labels = null, AgentVersionObjectStatus status = default, AgentDefinition definition = null)
        {
            metadata ??= new Dictionary<string, string>();
            labels ??= new List<string>();

            return new AgentVersionObject(
                @object,
                id,
                name,
                version,
                description,
                metadata,
                createdAt,
                labels?.ToList(),
                status,
                definition,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteAgentVersionResponse"/>. </summary>
        /// <param name="object"> The object type. Always 'agent.deleted'. </param>
        /// <param name="name"> The name of the agent. </param>
        /// <param name="version"> The version identifier of the agent. </param>
        /// <param name="deleted"> Whether the agent was successfully deleted. </param>
        /// <returns> A new <see cref="Models.DeleteAgentVersionResponse"/> instance for mocking. </returns>
        public static DeleteAgentVersionResponse DeleteAgentVersionResponse(DeleteAgentVersionResponseObject @object = default, string name = null, string version = null, bool deleted = default)
        {
            return new DeleteAgentVersionResponse(@object, name, version, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentVersionList"/>. </summary>
        /// <param name="data"> A list of items used to generate this response. </param>
        /// <param name="object"> The object type. Always 'list'. </param>
        /// <param name="firstId"> ID of the first item in the returned page. </param>
        /// <param name="lastId"> ID of the last item in the returned page. </param>
        /// <param name="hasMore"> Whether more items are available after this page. </param>
        /// <returns> A new <see cref="Models.AgentVersionList"/> instance for mocking. </returns>
        public static AgentVersionList AgentVersionList(IEnumerable<AgentVersionObject> data = null, AgentVersionListObject @object = default, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<AgentVersionObject>();

            return new AgentVersionList(
                data?.ToList(),
                @object,
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentLabelList"/>. </summary>
        /// <param name="data"> A list of items used to generate this response. </param>
        /// <param name="object"> The object type. Always 'list'. </param>
        /// <param name="firstId"> ID of the first item in the returned page. </param>
        /// <param name="lastId"> ID of the last item in the returned page. </param>
        /// <param name="hasMore"> Whether more items are available after this page. </param>
        /// <returns> A new <see cref="Models.AgentLabelList"/> instance for mocking. </returns>
        public static AgentLabelList AgentLabelList(IEnumerable<AgentLabelObject> data = null, AgentLabelListObject @object = default, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<AgentLabelObject>();

            return new AgentLabelList(
                data?.ToList(),
                @object,
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateResponse"/>. </summary>
        /// <param name="agent"> The agent to use for generating the response. </param>
        /// <param name="conversation"> The conversation options to associate with this response. </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard.
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        /// </param>
        /// <param name="temperature">
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </param>
        /// <param name="topP">
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </param>
        /// <param name="user"> A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). </param>
        /// <param name="serviceTier"></param>
        /// <param name="topLogprobs"> An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. </param>
        /// <param name="previousResponseId">
        /// The unique ID of the previous response to the model. Use this to
        /// create multi-turn conversations. Learn more about
        /// [conversation state](/docs/guides/conversation-state).
        /// </param>
        /// <param name="model">
        /// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
        /// offers a wide range of models with different capabilities, performance
        /// characteristics, and price points. Refer to the [model guide](/docs/models)
        /// to browse and compare available models.
        /// </param>
        /// <param name="reasoning"></param>
        /// <param name="background">
        /// Whether to run the model response in the background.
        /// [Learn more](/docs/guides/background).
        /// </param>
        /// <param name="maxOutputTokens"> An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). </param>
        /// <param name="maxToolCalls"> The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. </param>
        /// <param name="text">
        /// Configuration options for a text response from the model. Can be plain
        /// text or structured JSON data. Learn more:
        /// - [Text inputs and outputs](/docs/guides/text)
        /// - [Structured Outputs](/docs/guides/structured-outputs)
        /// </param>
        /// <param name="tools">
        /// An array of tools the model may call while generating a response. You
        /// can specify which tool to use by setting the `tool_choice` parameter.
        ///
        /// The two categories of tools you can provide the model are:
        ///
        /// - **Built-in tools**: Tools that are provided by OpenAI that extend the
        ///   model's capabilities, like [web search](/docs/guides/tools-web-search)
        ///   or [file search](/docs/guides/tools-file-search). Learn more about
        ///   [built-in tools](/docs/guides/tools).
        /// - **Function calls (custom tools)**: Functions that are defined by you,
        ///   enabling the model to call your own code. Learn more about
        ///   [function calling](/docs/guides/function-calling).
        /// Please note <see cref="Tool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CaptureSemanticEventsTool"/>, <see cref="CaptureStructuredOutputsTool"/>, <see cref="CodeInterpreterTool"/>, <see cref="ComputerUsePreviewTool"/>, <see cref="FileSearchTool"/>, <see cref="FunctionTool"/>, <see cref="ImageGenTool"/>, <see cref="LocalShellTool"/>, <see cref="MCPTool"/> and <see cref="WebSearchPreviewTool"/>.
        /// </param>
        /// <param name="toolChoice">
        /// How the model should select which tool (or tools) to use when generating
        /// a response. See the `tools` parameter to see how to specify which tools
        /// the model can call.
        /// </param>
        /// <param name="prompt"></param>
        /// <param name="truncation">
        /// The truncation strategy to use for the model response.
        /// - `auto`: If the context of this response and previous ones exceeds
        ///   the model's context window size, the model will truncate the
        ///   response to fit the context window by dropping input items in the
        ///   middle of the conversation.
        /// - `disabled` (default): If a model response will exceed the context window
        ///   size for a model, the request will fail with a 400 error.
        /// </param>
        /// <param name="input">
        /// Text, image, or file inputs to the model, used to generate a response.
        ///
        /// Learn more:
        /// - [Text inputs and outputs](/docs/guides/text)
        /// - [Image inputs](/docs/guides/images)
        /// - [File inputs](/docs/guides/pdf-files)
        /// - [Conversation state](/docs/guides/conversation-state)
        /// - [Function calling](/docs/guides/function-calling)
        /// </param>
        /// <param name="include">
        /// Specify additional output data to include in the model response. Currently
        /// supported values are:
        /// - `code_interpreter_call.outputs`: Includes the outputs of python code execution
        ///   in code interpreter tool call items.
        /// - `computer_call_output.output.image_url`: Include image urls from the computer call output.
        /// - `file_search_call.results`: Include the search results of
        ///   the file search tool call.
        /// - `message.input_image.image_url`: Include image urls from the input message.
        /// - `message.output_text.logprobs`: Include logprobs with assistant messages.
        /// - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
        ///   tokens in reasoning item outputs. This enables reasoning items to be used in
        ///   multi-turn conversations when using the Responses API statelessly (like
        ///   when the `store` parameter is set to `false`, or when an organization is
        ///   enrolled in the zero data retention program).
        /// </param>
        /// <param name="parallelToolCalls"> Whether to allow the model to run tool calls in parallel. </param>
        /// <param name="store">
        /// Whether to store the generated model response for later retrieval via
        /// API.
        /// </param>
        /// <param name="instructions">
        /// A system (or developer) message inserted into the model's context.
        ///
        /// When using along with `previous_response_id`, the instructions from a previous
        /// response will not be carried over to the next response. This makes it simple
        /// to swap out system (or developer) messages in new responses.
        /// </param>
        /// <param name="stream">
        /// If set to true, the model response data will be streamed to the client
        /// as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
        /// See the [Streaming section below](/docs/api-reference/responses-streaming)
        /// for more information.
        /// </param>
        /// <returns> A new <see cref="Models.CreateResponse"/> instance for mocking. </returns>
        public static CreateResponse CreateResponse(AgentReference agent = null, ConversationOptions conversation = null, IDictionary<string, string> metadata = null, float? temperature = null, float? topP = null, string user = null, ServiceTier? serviceTier = null, int? topLogprobs = null, string previousResponseId = null, ModelIdsResponses? model = null, Reasoning reasoning = null, bool? background = null, int? maxOutputTokens = null, int? maxToolCalls = null, CreateResponseText text = null, IEnumerable<Tool> tools = null, BinaryData toolChoice = null, Prompt prompt = null, CreateResponseTruncation? truncation = null, BinaryData input = null, IEnumerable<Includable> include = null, bool? parallelToolCalls = null, bool? store = null, string instructions = null, bool? stream = null)
        {
            metadata ??= new Dictionary<string, string>();
            tools ??= new List<Tool>();
            include ??= new List<Includable>();

            return new CreateResponse(
                agent,
                conversation,
                metadata,
                temperature,
                topP,
                user,
                serviceTier,
                topLogprobs,
                previousResponseId,
                model,
                reasoning,
                background,
                maxOutputTokens,
                maxToolCalls,
                text,
                tools?.ToList(),
                toolChoice,
                prompt,
                truncation,
                input,
                include?.ToList(),
                parallelToolCalls,
                store,
                instructions,
                stream,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentReference"/>. </summary>
        /// <param name="type"></param>
        /// <param name="name"> The name of the agent. </param>
        /// <param name="version"> The version identifier of the agent. </param>
        /// <param name="label"> The label that identifies the agent. </param>
        /// <returns> A new <see cref="Models.AgentReference"/> instance for mocking. </returns>
        public static AgentReference AgentReference(AgentReferenceType type = default, string name = null, string version = null, string label = null)
        {
            return new AgentReference(type, name, version, label, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationOptions"/>. </summary>
        /// <param name="id"> The conversation ID to associate with this response. </param>
        /// <param name="commit"> If true, commit the outputs of the response to the conversation if a conversation is specified by the user. </param>
        /// <returns> A new <see cref="Models.ConversationOptions"/> instance for mocking. </returns>
        public static ConversationOptions ConversationOptions(string id = null, bool commit = default)
        {
            return new ConversationOptions(id, commit, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Response"/>. </summary>
        /// <param name="agent"> The agent used for this response. </param>
        /// <param name="conversationId"> The id of the conversation used for this response. </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard.
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        /// </param>
        /// <param name="temperature">
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </param>
        /// <param name="topP">
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </param>
        /// <param name="user"> A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). </param>
        /// <param name="serviceTier"></param>
        /// <param name="topLogprobs"> An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. </param>
        /// <param name="previousResponseId">
        /// The unique ID of the previous response to the model. Use this to
        /// create multi-turn conversations. Learn more about
        /// [conversation state](/docs/guides/conversation-state).
        /// </param>
        /// <param name="model">
        /// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
        /// offers a wide range of models with different capabilities, performance
        /// characteristics, and price points. Refer to the [model guide](/docs/models)
        /// to browse and compare available models.
        /// </param>
        /// <param name="reasoning"></param>
        /// <param name="background">
        /// Whether to run the model response in the background.
        /// [Learn more](/docs/guides/background).
        /// </param>
        /// <param name="maxOutputTokens"> An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). </param>
        /// <param name="maxToolCalls"> The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. </param>
        /// <param name="text">
        /// Configuration options for a text response from the model. Can be plain
        /// text or structured JSON data. Learn more:
        /// - [Text inputs and outputs](/docs/guides/text)
        /// - [Structured Outputs](/docs/guides/structured-outputs)
        /// </param>
        /// <param name="tools">
        /// An array of tools the model may call while generating a response. You
        /// can specify which tool to use by setting the `tool_choice` parameter.
        ///
        /// The two categories of tools you can provide the model are:
        ///
        /// - **Built-in tools**: Tools that are provided by OpenAI that extend the
        ///   model's capabilities, like [web search](/docs/guides/tools-web-search)
        ///   or [file search](/docs/guides/tools-file-search). Learn more about
        ///   [built-in tools](/docs/guides/tools).
        /// - **Function calls (custom tools)**: Functions that are defined by you,
        ///   enabling the model to call your own code. Learn more about
        ///   [function calling](/docs/guides/function-calling).
        /// Please note <see cref="Tool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CaptureSemanticEventsTool"/>, <see cref="CaptureStructuredOutputsTool"/>, <see cref="CodeInterpreterTool"/>, <see cref="ComputerUsePreviewTool"/>, <see cref="FileSearchTool"/>, <see cref="FunctionTool"/>, <see cref="ImageGenTool"/>, <see cref="LocalShellTool"/>, <see cref="MCPTool"/> and <see cref="WebSearchPreviewTool"/>.
        /// </param>
        /// <param name="toolChoice">
        /// How the model should select which tool (or tools) to use when generating
        /// a response. See the `tools` parameter to see how to specify which tools
        /// the model can call.
        /// </param>
        /// <param name="prompt"></param>
        /// <param name="truncation">
        /// The truncation strategy to use for the model response.
        /// - `auto`: If the context of this response and previous ones exceeds
        ///   the model's context window size, the model will truncate the
        ///   response to fit the context window by dropping input items in the
        ///   middle of the conversation.
        /// - `disabled` (default): If a model response will exceed the context window
        ///   size for a model, the request will fail with a 400 error.
        /// </param>
        /// <param name="id"> Unique identifier for this Response. </param>
        /// <param name="object"> The object type of this resource - always set to `response`. </param>
        /// <param name="status">
        /// The status of the response generation. One of `completed`, `failed`,
        /// `in_progress`, `cancelled`, `queued`, or `incomplete`.
        /// </param>
        /// <param name="createdAt"> Unix timestamp (in seconds) of when this Response was created. </param>
        /// <param name="error"></param>
        /// <param name="incompleteDetails"> Details about why the response is incomplete. </param>
        /// <param name="output">
        /// An array of content items generated by the model.
        ///
        /// - The length and order of items in the `output` array is dependent
        ///   on the model's response.
        /// - Rather than accessing the first item in the `output` array and
        ///   assuming it's an `assistant` message with the content generated by
        ///   the model, you might consider using the `output_text` property where
        ///   supported in SDKs.
        /// Please note <see cref="Models.ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="Models.CodeInterpreterToolCallItemResource"/>, <see cref="Models.ComputerToolCallItemResource"/>, <see cref="Models.ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="Models.FileSearchToolCallItemResource"/>, <see cref="Models.FunctionToolCallItemResource"/>, <see cref="Models.FunctionToolCallOutputItemResource"/>, <see cref="Models.ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="Models.LocalShellToolCallItemResource"/>, <see cref="Models.LocalShellToolCallOutputItemResource"/>, <see cref="Models.MCPApprovalRequestItemResource"/>, <see cref="Models.MCPApprovalResponseItemResource"/>, <see cref="Models.MCPCallItemResource"/>, <see cref="Models.MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="Models.ReasoningItemResource"/>, <see cref="Models.SemanticEventsOutputItemResource"/>, <see cref="Models.StructuredInputsItemResource"/>, <see cref="Models.StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="Models.WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <param name="instructions">
        /// A system (or developer) message inserted into the model's context.
        ///
        /// When using along with `previous_response_id`, the instructions from a previous
        /// response will not be carried over to the next response. This makes it simple
        /// to swap out system (or developer) messages in new responses.
        /// </param>
        /// <param name="outputText">
        /// SDK-only convenience property that contains the aggregated text output
        /// from all `output_text` items in the `output` array, if any are present.
        /// Supported in the Python and JavaScript SDKs.
        /// </param>
        /// <param name="usage"></param>
        /// <param name="parallelToolCalls"> Whether to allow the model to run tool calls in parallel. </param>
        /// <returns> A new <see cref="Models.Response"/> instance for mocking. </returns>
        public static Response Response(AgentId agent = null, string conversationId = null, IReadOnlyDictionary<string, string> metadata = null, float? temperature = null, float? topP = null, string user = null, ServiceTier? serviceTier = null, int? topLogprobs = null, string previousResponseId = null, ModelIdsResponses? model = null, Reasoning reasoning = null, bool? background = null, int? maxOutputTokens = null, int? maxToolCalls = null, CreateResponseText text = null, IEnumerable<Tool> tools = null, BinaryData toolChoice = null, Prompt prompt = null, CreateResponseTruncation? truncation = null, string id = null, ResponseObject @object = default, ResponseStatus? status = null, DateTimeOffset createdAt = default, ResponseError error = null, ResponseIncompleteDetails1 incompleteDetails = null, IEnumerable<ItemResource> output = null, BinaryData instructions = null, string outputText = null, ResponseUsage usage = null, bool parallelToolCalls = default)
        {
            metadata ??= new Dictionary<string, string>();
            tools ??= new List<Tool>();
            output ??= new List<ItemResource>();

            return new Response(
                agent,
                conversationId,
                metadata,
                temperature,
                topP,
                user,
                serviceTier,
                topLogprobs,
                previousResponseId,
                model,
                reasoning,
                background,
                maxOutputTokens,
                maxToolCalls,
                text,
                tools?.ToList(),
                toolChoice,
                prompt,
                truncation,
                id,
                @object,
                status,
                createdAt,
                error,
                incompleteDetails,
                output?.ToList(),
                instructions,
                outputText,
                usage,
                parallelToolCalls,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"> A human-readable description of the error. </param>
        /// <returns> A new <see cref="Models.ResponseError"/> instance for mocking. </returns>
        public static ResponseError ResponseError(ResponseErrorCode code = default, string message = null)
        {
            return new ResponseError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseIncompleteDetails1"/>. </summary>
        /// <param name="reason"> The reason why the response is incomplete. </param>
        /// <returns> A new <see cref="Models.ResponseIncompleteDetails1"/> instance for mocking. </returns>
        public static ResponseIncompleteDetails1 ResponseIncompleteDetails1(ResponseIncompleteDetailsReason? reason = null)
        {
            return new ResponseIncompleteDetails1(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseUsage"/>. </summary>
        /// <param name="inputTokens"> The number of input tokens. </param>
        /// <param name="inputTokensDetails"> A detailed breakdown of the input tokens. </param>
        /// <param name="outputTokens"> The number of output tokens. </param>
        /// <param name="outputTokensDetails"> A detailed breakdown of the output tokens. </param>
        /// <param name="totalTokens"> The total number of tokens used. </param>
        /// <returns> A new <see cref="Models.ResponseUsage"/> instance for mocking. </returns>
        public static ResponseUsage ResponseUsage(int inputTokens = default, ResponseUsageInputTokensDetails inputTokensDetails = null, int outputTokens = default, ResponseUsageOutputTokensDetails outputTokensDetails = null, int totalTokens = default)
        {
            return new ResponseUsage(
                inputTokens,
                inputTokensDetails,
                outputTokens,
                outputTokensDetails,
                totalTokens,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseUsageInputTokensDetails"/>. </summary>
        /// <param name="cachedTokens">
        /// The number of tokens that were retrieved from the cache.
        /// [More on prompt caching](/docs/guides/prompt-caching).
        /// </param>
        /// <returns> A new <see cref="Models.ResponseUsageInputTokensDetails"/> instance for mocking. </returns>
        public static ResponseUsageInputTokensDetails ResponseUsageInputTokensDetails(int cachedTokens = default)
        {
            return new ResponseUsageInputTokensDetails(cachedTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseUsageOutputTokensDetails"/>. </summary>
        /// <param name="reasoningTokens"> The number of reasoning tokens. </param>
        /// <returns> A new <see cref="Models.ResponseUsageOutputTokensDetails"/> instance for mocking. </returns>
        public static ResponseUsageOutputTokensDetails ResponseUsageOutputTokensDetails(int reasoningTokens = default)
        {
            return new ResponseUsageOutputTokensDetails(reasoningTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseStreamEvent"/>. </summary>
        /// <param name="type"></param>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <returns> A new <see cref="Models.ResponseStreamEvent"/> instance for mocking. </returns>
        public static ResponseStreamEvent ResponseStreamEvent(string type = null, int sequenceNumber = default)
        {
            return new UnknownResponseStreamEvent(type == null ? default : new ResponseStreamEventType(type), sequenceNumber, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="response"> Properties of the completed response. </param>
        /// <returns> A new <see cref="Models.ResponseCompletedEvent"/> instance for mocking. </returns>
        public static ResponseCompletedEvent ResponseCompletedEvent(int sequenceNumber = default, Response response = null)
        {
            return new ResponseCompletedEvent(ResponseStreamEventType.ResponseCompleted, sequenceNumber, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseContentPartAddedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the content part was added to. </param>
        /// <param name="outputIndex"> The index of the output item that the content part was added to. </param>
        /// <param name="contentIndex"> The index of the content part that was added. </param>
        /// <param name="part">
        /// The content part that was added.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ResponseContentPartAddedEvent"/> instance for mocking. </returns>
        public static ResponseContentPartAddedEvent ResponseContentPartAddedEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, ItemContent part = null)
        {
            return new ResponseContentPartAddedEvent(
                ResponseStreamEventType.ResponseContentPartAdded,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseContentPartDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the content part was added to. </param>
        /// <param name="outputIndex"> The index of the output item that the content part was added to. </param>
        /// <param name="contentIndex"> The index of the content part that is done. </param>
        /// <param name="part">
        /// The content part that is done.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ResponseContentPartDoneEvent"/> instance for mocking. </returns>
        public static ResponseContentPartDoneEvent ResponseContentPartDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, ItemContent part = null)
        {
            return new ResponseContentPartDoneEvent(
                ResponseStreamEventType.ResponseContentPartDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCreatedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="response"> The response that was created. </param>
        /// <returns> A new <see cref="Models.ResponseCreatedEvent"/> instance for mocking. </returns>
        public static ResponseCreatedEvent ResponseCreatedEvent(int sequenceNumber = default, Response response = null)
        {
            return new ResponseCreatedEvent(ResponseStreamEventType.ResponseCreated, sequenceNumber, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseErrorEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="param"> The error parameter. </param>
        /// <returns> A new <see cref="Models.ResponseErrorEvent"/> instance for mocking. </returns>
        public static ResponseErrorEvent ResponseErrorEvent(int sequenceNumber = default, string code = null, string message = null, string param = null)
        {
            return new ResponseErrorEvent(
                ResponseStreamEventType.Error,
                sequenceNumber,
                serializedAdditionalRawData: null,
                code,
                message,
                param);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseFileSearchCallCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that the file search call is initiated. </param>
        /// <param name="itemId"> The ID of the output item that the file search call is initiated. </param>
        /// <returns> A new <see cref="Models.ResponseFileSearchCallCompletedEvent"/> instance for mocking. </returns>
        public static ResponseFileSearchCallCompletedEvent ResponseFileSearchCallCompletedEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseFileSearchCallCompletedEvent(ResponseStreamEventType.ResponseFileSearchCallCompleted, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseFileSearchCallInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that the file search call is initiated. </param>
        /// <param name="itemId"> The ID of the output item that the file search call is initiated. </param>
        /// <returns> A new <see cref="Models.ResponseFileSearchCallInProgressEvent"/> instance for mocking. </returns>
        public static ResponseFileSearchCallInProgressEvent ResponseFileSearchCallInProgressEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseFileSearchCallInProgressEvent(ResponseStreamEventType.ResponseFileSearchCallInProgress, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseFileSearchCallSearchingEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that the file search call is searching. </param>
        /// <param name="itemId"> The ID of the output item that the file search call is initiated. </param>
        /// <returns> A new <see cref="Models.ResponseFileSearchCallSearchingEvent"/> instance for mocking. </returns>
        public static ResponseFileSearchCallSearchingEvent ResponseFileSearchCallSearchingEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseFileSearchCallSearchingEvent(ResponseStreamEventType.ResponseFileSearchCallSearching, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseFunctionCallArgumentsDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the function-call arguments delta is added to. </param>
        /// <param name="outputIndex"> The index of the output item that the function-call arguments delta is added to. </param>
        /// <param name="delta"> The function-call arguments delta that is added. </param>
        /// <returns> A new <see cref="Models.ResponseFunctionCallArgumentsDeltaEvent"/> instance for mocking. </returns>
        public static ResponseFunctionCallArgumentsDeltaEvent ResponseFunctionCallArgumentsDeltaEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, string delta = null)
        {
            return new ResponseFunctionCallArgumentsDeltaEvent(
                ResponseStreamEventType.ResponseFunctionCallArgumentsDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseFunctionCallArgumentsDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item. </param>
        /// <param name="arguments"> The function-call arguments. </param>
        /// <returns> A new <see cref="Models.ResponseFunctionCallArgumentsDoneEvent"/> instance for mocking. </returns>
        public static ResponseFunctionCallArgumentsDoneEvent ResponseFunctionCallArgumentsDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, string arguments = null)
        {
            return new ResponseFunctionCallArgumentsDoneEvent(
                ResponseStreamEventType.ResponseFunctionCallArgumentsDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                arguments);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="response"> The response that is in progress. </param>
        /// <returns> A new <see cref="Models.ResponseInProgressEvent"/> instance for mocking. </returns>
        public static ResponseInProgressEvent ResponseInProgressEvent(int sequenceNumber = default, Response response = null)
        {
            return new ResponseInProgressEvent(ResponseStreamEventType.ResponseInProgress, sequenceNumber, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseFailedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="response"> The response that failed. </param>
        /// <returns> A new <see cref="Models.ResponseFailedEvent"/> instance for mocking. </returns>
        public static ResponseFailedEvent ResponseFailedEvent(int sequenceNumber = default, Response response = null)
        {
            return new ResponseFailedEvent(ResponseStreamEventType.ResponseFailed, sequenceNumber, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseIncompleteEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="response"> The response that was incomplete. </param>
        /// <returns> A new <see cref="Models.ResponseIncompleteEvent"/> instance for mocking. </returns>
        public static ResponseIncompleteEvent ResponseIncompleteEvent(int sequenceNumber = default, Response response = null)
        {
            return new ResponseIncompleteEvent(ResponseStreamEventType.ResponseIncomplete, sequenceNumber, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseOutputItemAddedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that was added. </param>
        /// <param name="item">
        /// The output item that was added.
        /// Please note <see cref="Models.ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="Models.CodeInterpreterToolCallItemResource"/>, <see cref="Models.ComputerToolCallItemResource"/>, <see cref="Models.ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="Models.FileSearchToolCallItemResource"/>, <see cref="Models.FunctionToolCallItemResource"/>, <see cref="Models.FunctionToolCallOutputItemResource"/>, <see cref="Models.ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="Models.LocalShellToolCallItemResource"/>, <see cref="Models.LocalShellToolCallOutputItemResource"/>, <see cref="Models.MCPApprovalRequestItemResource"/>, <see cref="Models.MCPApprovalResponseItemResource"/>, <see cref="Models.MCPCallItemResource"/>, <see cref="Models.MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="Models.ReasoningItemResource"/>, <see cref="Models.SemanticEventsOutputItemResource"/>, <see cref="Models.StructuredInputsItemResource"/>, <see cref="Models.StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="Models.WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ResponseOutputItemAddedEvent"/> instance for mocking. </returns>
        public static ResponseOutputItemAddedEvent ResponseOutputItemAddedEvent(int sequenceNumber = default, int outputIndex = default, ItemResource item = null)
        {
            return new ResponseOutputItemAddedEvent(ResponseStreamEventType.ResponseOutputItemAdded, sequenceNumber, serializedAdditionalRawData: null, outputIndex, item);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseOutputItemDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that was marked done. </param>
        /// <param name="item">
        /// The output item that was marked done.
        /// Please note <see cref="Models.ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="Models.CodeInterpreterToolCallItemResource"/>, <see cref="Models.ComputerToolCallItemResource"/>, <see cref="Models.ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="Models.FileSearchToolCallItemResource"/>, <see cref="Models.FunctionToolCallItemResource"/>, <see cref="Models.FunctionToolCallOutputItemResource"/>, <see cref="Models.ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="Models.LocalShellToolCallItemResource"/>, <see cref="Models.LocalShellToolCallOutputItemResource"/>, <see cref="Models.MCPApprovalRequestItemResource"/>, <see cref="Models.MCPApprovalResponseItemResource"/>, <see cref="Models.MCPCallItemResource"/>, <see cref="Models.MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="Models.ReasoningItemResource"/>, <see cref="Models.SemanticEventsOutputItemResource"/>, <see cref="Models.StructuredInputsItemResource"/>, <see cref="Models.StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="Models.WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ResponseOutputItemDoneEvent"/> instance for mocking. </returns>
        public static ResponseOutputItemDoneEvent ResponseOutputItemDoneEvent(int sequenceNumber = default, int outputIndex = default, ItemResource item = null)
        {
            return new ResponseOutputItemDoneEvent(ResponseStreamEventType.ResponseOutputItemDone, sequenceNumber, serializedAdditionalRawData: null, outputIndex, item);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseRefusalDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the refusal text is added to. </param>
        /// <param name="outputIndex"> The index of the output item that the refusal text is added to. </param>
        /// <param name="contentIndex"> The index of the content part that the refusal text is added to. </param>
        /// <param name="delta"> The refusal text that is added. </param>
        /// <returns> A new <see cref="Models.ResponseRefusalDeltaEvent"/> instance for mocking. </returns>
        public static ResponseRefusalDeltaEvent ResponseRefusalDeltaEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, string delta = null)
        {
            return new ResponseRefusalDeltaEvent(
                ResponseStreamEventType.ResponseRefusalDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseRefusalDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the refusal text is finalized. </param>
        /// <param name="outputIndex"> The index of the output item that the refusal text is finalized. </param>
        /// <param name="contentIndex"> The index of the content part that the refusal text is finalized. </param>
        /// <param name="refusal"> The refusal text that is finalized. </param>
        /// <returns> A new <see cref="Models.ResponseRefusalDoneEvent"/> instance for mocking. </returns>
        public static ResponseRefusalDoneEvent ResponseRefusalDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, string refusal = null)
        {
            return new ResponseRefusalDoneEvent(
                ResponseStreamEventType.ResponseRefusalDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                refusal);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseTextDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the text delta was added to. </param>
        /// <param name="outputIndex"> The index of the output item that the text delta was added to. </param>
        /// <param name="contentIndex"> The index of the content part that the text delta was added to. </param>
        /// <param name="delta"> The text delta that was added. </param>
        /// <returns> A new <see cref="Models.ResponseTextDeltaEvent"/> instance for mocking. </returns>
        public static ResponseTextDeltaEvent ResponseTextDeltaEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, string delta = null)
        {
            return new ResponseTextDeltaEvent(
                ResponseStreamEventType.ResponseOutputTextDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseTextDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the text content is finalized. </param>
        /// <param name="outputIndex"> The index of the output item that the text content is finalized. </param>
        /// <param name="contentIndex"> The index of the content part that the text content is finalized. </param>
        /// <param name="text"> The text content that is finalized. </param>
        /// <returns> A new <see cref="Models.ResponseTextDoneEvent"/> instance for mocking. </returns>
        public static ResponseTextDoneEvent ResponseTextDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, string text = null)
        {
            return new ResponseTextDoneEvent(
                ResponseStreamEventType.ResponseOutputTextDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningSummaryPartAddedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the item this summary part is associated with. </param>
        /// <param name="outputIndex"> The index of the output item this summary part is associated with. </param>
        /// <param name="summaryIndex"> The index of the summary part within the reasoning summary. </param>
        /// <param name="part">
        /// The summary part that was added.
        /// Please note <see cref="ReasoningItemSummaryPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReasoningItemSummaryTextPart"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ResponseReasoningSummaryPartAddedEvent"/> instance for mocking. </returns>
        public static ResponseReasoningSummaryPartAddedEvent ResponseReasoningSummaryPartAddedEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int summaryIndex = default, ReasoningItemSummaryPart part = null)
        {
            return new ResponseReasoningSummaryPartAddedEvent(
                ResponseStreamEventType.ResponseReasoningSummaryPartAdded,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                summaryIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningSummaryPartDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the item this summary part is associated with. </param>
        /// <param name="outputIndex"> The index of the output item this summary part is associated with. </param>
        /// <param name="summaryIndex"> The index of the summary part within the reasoning summary. </param>
        /// <param name="part">
        /// The completed summary part.
        /// Please note <see cref="ReasoningItemSummaryPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReasoningItemSummaryTextPart"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ResponseReasoningSummaryPartDoneEvent"/> instance for mocking. </returns>
        public static ResponseReasoningSummaryPartDoneEvent ResponseReasoningSummaryPartDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int summaryIndex = default, ReasoningItemSummaryPart part = null)
        {
            return new ResponseReasoningSummaryPartDoneEvent(
                ResponseStreamEventType.ResponseReasoningSummaryPartDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                summaryIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningSummaryTextDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the item this summary text delta is associated with. </param>
        /// <param name="outputIndex"> The index of the output item this summary text delta is associated with. </param>
        /// <param name="summaryIndex"> The index of the summary part within the reasoning summary. </param>
        /// <param name="delta"> The text delta that was added to the summary. </param>
        /// <returns> A new <see cref="Models.ResponseReasoningSummaryTextDeltaEvent"/> instance for mocking. </returns>
        public static ResponseReasoningSummaryTextDeltaEvent ResponseReasoningSummaryTextDeltaEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int summaryIndex = default, string delta = null)
        {
            return new ResponseReasoningSummaryTextDeltaEvent(
                ResponseStreamEventType.ResponseReasoningSummaryTextDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                summaryIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningSummaryTextDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the item this summary text is associated with. </param>
        /// <param name="outputIndex"> The index of the output item this summary text is associated with. </param>
        /// <param name="summaryIndex"> The index of the summary part within the reasoning summary. </param>
        /// <param name="text"> The full text of the completed reasoning summary. </param>
        /// <returns> A new <see cref="Models.ResponseReasoningSummaryTextDoneEvent"/> instance for mocking. </returns>
        public static ResponseReasoningSummaryTextDoneEvent ResponseReasoningSummaryTextDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int summaryIndex = default, string text = null)
        {
            return new ResponseReasoningSummaryTextDoneEvent(
                ResponseStreamEventType.ResponseReasoningSummaryTextDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                summaryIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseWebSearchCallCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that the web search call is associated with. </param>
        /// <param name="itemId"> Unique ID for the output item associated with the web search call. </param>
        /// <returns> A new <see cref="Models.ResponseWebSearchCallCompletedEvent"/> instance for mocking. </returns>
        public static ResponseWebSearchCallCompletedEvent ResponseWebSearchCallCompletedEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseWebSearchCallCompletedEvent(ResponseStreamEventType.ResponseWebSearchCallCompleted, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseWebSearchCallInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that the web search call is associated with. </param>
        /// <param name="itemId"> Unique ID for the output item associated with the web search call. </param>
        /// <returns> A new <see cref="Models.ResponseWebSearchCallInProgressEvent"/> instance for mocking. </returns>
        public static ResponseWebSearchCallInProgressEvent ResponseWebSearchCallInProgressEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseWebSearchCallInProgressEvent(ResponseStreamEventType.ResponseWebSearchCallInProgress, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseWebSearchCallSearchingEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item that the web search call is associated with. </param>
        /// <param name="itemId"> Unique ID for the output item associated with the web search call. </param>
        /// <returns> A new <see cref="Models.ResponseWebSearchCallSearchingEvent"/> instance for mocking. </returns>
        public static ResponseWebSearchCallSearchingEvent ResponseWebSearchCallSearchingEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseWebSearchCallSearchingEvent(ResponseStreamEventType.ResponseWebSearchCallSearching, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseImageGenCallCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the image generation item being processed. </param>
        /// <returns> A new <see cref="Models.ResponseImageGenCallCompletedEvent"/> instance for mocking. </returns>
        public static ResponseImageGenCallCompletedEvent ResponseImageGenCallCompletedEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseImageGenCallCompletedEvent(ResponseStreamEventType.ResponseImageGenerationCallCompleted, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseImageGenCallGeneratingEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the image generation item being processed. </param>
        /// <returns> A new <see cref="Models.ResponseImageGenCallGeneratingEvent"/> instance for mocking. </returns>
        public static ResponseImageGenCallGeneratingEvent ResponseImageGenCallGeneratingEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseImageGenCallGeneratingEvent(ResponseStreamEventType.ResponseImageGenerationCallGenerating, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseImageGenCallInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the image generation item being processed. </param>
        /// <returns> A new <see cref="Models.ResponseImageGenCallInProgressEvent"/> instance for mocking. </returns>
        public static ResponseImageGenCallInProgressEvent ResponseImageGenCallInProgressEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseImageGenCallInProgressEvent(ResponseStreamEventType.ResponseImageGenerationCallInProgress, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseImageGenCallPartialImageEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the image generation item being processed. </param>
        /// <param name="partialImageIndex"> 0-based index for the partial image (backend is 1-based, but this is 0-based for the user). </param>
        /// <param name="partialImageB64"> Base64-encoded partial image data, suitable for rendering as an image. </param>
        /// <returns> A new <see cref="Models.ResponseImageGenCallPartialImageEvent"/> instance for mocking. </returns>
        public static ResponseImageGenCallPartialImageEvent ResponseImageGenCallPartialImageEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null, int partialImageIndex = default, string partialImageB64 = null)
        {
            return new ResponseImageGenCallPartialImageEvent(
                ResponseStreamEventType.ResponseImageGenerationCallPartialImage,
                sequenceNumber,
                serializedAdditionalRawData: null,
                outputIndex,
                itemId,
                partialImageIndex,
                partialImageB64);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPCallArgumentsDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the MCP tool call item being processed. </param>
        /// <param name="delta"> The partial update to the arguments for the MCP tool call. </param>
        /// <returns> A new <see cref="Models.ResponseMCPCallArgumentsDeltaEvent"/> instance for mocking. </returns>
        public static ResponseMCPCallArgumentsDeltaEvent ResponseMCPCallArgumentsDeltaEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null, BinaryData delta = null)
        {
            return new ResponseMCPCallArgumentsDeltaEvent(
                ResponseStreamEventType.ResponseMcpCallArgumentsDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                outputIndex,
                itemId,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPCallArgumentsDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the MCP tool call item being processed. </param>
        /// <param name="arguments"> The finalized arguments for the MCP tool call. </param>
        /// <returns> A new <see cref="Models.ResponseMCPCallArgumentsDoneEvent"/> instance for mocking. </returns>
        public static ResponseMCPCallArgumentsDoneEvent ResponseMCPCallArgumentsDoneEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null, BinaryData arguments = null)
        {
            return new ResponseMCPCallArgumentsDoneEvent(
                ResponseStreamEventType.ResponseMcpCallArgumentsDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                outputIndex,
                itemId,
                arguments);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPCallCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <returns> A new <see cref="Models.ResponseMCPCallCompletedEvent"/> instance for mocking. </returns>
        public static ResponseMCPCallCompletedEvent ResponseMCPCallCompletedEvent(int sequenceNumber = default)
        {
            return new ResponseMCPCallCompletedEvent(ResponseStreamEventType.ResponseMcpCallCompleted, sequenceNumber, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPCallFailedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <returns> A new <see cref="Models.ResponseMCPCallFailedEvent"/> instance for mocking. </returns>
        public static ResponseMCPCallFailedEvent ResponseMCPCallFailedEvent(int sequenceNumber = default)
        {
            return new ResponseMCPCallFailedEvent(ResponseStreamEventType.ResponseMcpCallFailed, sequenceNumber, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPCallInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="itemId"> The unique identifier of the MCP tool call item being processed. </param>
        /// <returns> A new <see cref="Models.ResponseMCPCallInProgressEvent"/> instance for mocking. </returns>
        public static ResponseMCPCallInProgressEvent ResponseMCPCallInProgressEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseMCPCallInProgressEvent(ResponseStreamEventType.ResponseMcpCallInProgress, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPListToolsCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <returns> A new <see cref="Models.ResponseMCPListToolsCompletedEvent"/> instance for mocking. </returns>
        public static ResponseMCPListToolsCompletedEvent ResponseMCPListToolsCompletedEvent(int sequenceNumber = default)
        {
            return new ResponseMCPListToolsCompletedEvent(ResponseStreamEventType.ResponseMcpListToolsCompleted, sequenceNumber, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPListToolsFailedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <returns> A new <see cref="Models.ResponseMCPListToolsFailedEvent"/> instance for mocking. </returns>
        public static ResponseMCPListToolsFailedEvent ResponseMCPListToolsFailedEvent(int sequenceNumber = default)
        {
            return new ResponseMCPListToolsFailedEvent(ResponseStreamEventType.ResponseMcpListToolsFailed, sequenceNumber, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseMCPListToolsInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <returns> A new <see cref="Models.ResponseMCPListToolsInProgressEvent"/> instance for mocking. </returns>
        public static ResponseMCPListToolsInProgressEvent ResponseMCPListToolsInProgressEvent(int sequenceNumber = default)
        {
            return new ResponseMCPListToolsInProgressEvent(ResponseStreamEventType.ResponseMcpListToolsInProgress, sequenceNumber, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseQueuedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="response"> The full response object that is queued. </param>
        /// <returns> A new <see cref="Models.ResponseQueuedEvent"/> instance for mocking. </returns>
        public static ResponseQueuedEvent ResponseQueuedEvent(int sequenceNumber = default, Response response = null)
        {
            return new ResponseQueuedEvent(ResponseStreamEventType.ResponseQueued, sequenceNumber, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The unique identifier of the item for which reasoning is being updated. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="contentIndex"> The index of the reasoning content part within the output item. </param>
        /// <param name="delta"> The partial update to the reasoning content. </param>
        /// <returns> A new <see cref="Models.ResponseReasoningDeltaEvent"/> instance for mocking. </returns>
        public static ResponseReasoningDeltaEvent ResponseReasoningDeltaEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, BinaryData delta = null)
        {
            return new ResponseReasoningDeltaEvent(
                ResponseStreamEventType.ResponseReasoningDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The unique identifier of the item for which reasoning is finalized. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="contentIndex"> The index of the reasoning content part within the output item. </param>
        /// <param name="text"> The finalized reasoning text. </param>
        /// <returns> A new <see cref="Models.ResponseReasoningDoneEvent"/> instance for mocking. </returns>
        public static ResponseReasoningDoneEvent ResponseReasoningDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int contentIndex = default, string text = null)
        {
            return new ResponseReasoningDoneEvent(
                ResponseStreamEventType.ResponseReasoningDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                contentIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningSummaryDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The unique identifier of the item for which the reasoning summary is being updated. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="summaryIndex"> The index of the summary part within the output item. </param>
        /// <param name="delta"> The partial update to the reasoning summary content. </param>
        /// <returns> A new <see cref="Models.ResponseReasoningSummaryDeltaEvent"/> instance for mocking. </returns>
        public static ResponseReasoningSummaryDeltaEvent ResponseReasoningSummaryDeltaEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int summaryIndex = default, BinaryData delta = null)
        {
            return new ResponseReasoningSummaryDeltaEvent(
                ResponseStreamEventType.ResponseReasoningSummaryDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                summaryIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseReasoningSummaryDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The unique identifier of the item for which the reasoning summary is finalized. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="summaryIndex"> The index of the summary part within the output item. </param>
        /// <param name="text"> The finalized reasoning summary text. </param>
        /// <returns> A new <see cref="Models.ResponseReasoningSummaryDoneEvent"/> instance for mocking. </returns>
        public static ResponseReasoningSummaryDoneEvent ResponseReasoningSummaryDoneEvent(int sequenceNumber = default, string itemId = null, int outputIndex = default, int summaryIndex = default, string text = null)
        {
            return new ResponseReasoningSummaryDoneEvent(
                ResponseStreamEventType.ResponseReasoningSummaryDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                itemId,
                outputIndex,
                summaryIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCodeInterpreterCallCodeDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response for which the code is being streamed. </param>
        /// <param name="itemId"> The unique identifier of the code interpreter tool call item. </param>
        /// <param name="delta"> The partial code snippet being streamed by the code interpreter. </param>
        /// <returns> A new <see cref="Models.ResponseCodeInterpreterCallCodeDeltaEvent"/> instance for mocking. </returns>
        public static ResponseCodeInterpreterCallCodeDeltaEvent ResponseCodeInterpreterCallCodeDeltaEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null, string delta = null)
        {
            return new ResponseCodeInterpreterCallCodeDeltaEvent(
                ResponseStreamEventType.ResponseCodeInterpreterCallCodeDelta,
                sequenceNumber,
                serializedAdditionalRawData: null,
                outputIndex,
                itemId,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCodeInterpreterCallCodeDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response for which the code is finalized. </param>
        /// <param name="itemId"> The unique identifier of the code interpreter tool call item. </param>
        /// <param name="code"> The final code snippet output by the code interpreter. </param>
        /// <returns> A new <see cref="Models.ResponseCodeInterpreterCallCodeDoneEvent"/> instance for mocking. </returns>
        public static ResponseCodeInterpreterCallCodeDoneEvent ResponseCodeInterpreterCallCodeDoneEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null, string code = null)
        {
            return new ResponseCodeInterpreterCallCodeDoneEvent(
                ResponseStreamEventType.ResponseCodeInterpreterCallCodeDone,
                sequenceNumber,
                serializedAdditionalRawData: null,
                outputIndex,
                itemId,
                code);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCodeInterpreterCallCompletedEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response for which the code interpreter call is completed. </param>
        /// <param name="itemId"> The unique identifier of the code interpreter tool call item. </param>
        /// <returns> A new <see cref="Models.ResponseCodeInterpreterCallCompletedEvent"/> instance for mocking. </returns>
        public static ResponseCodeInterpreterCallCompletedEvent ResponseCodeInterpreterCallCompletedEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseCodeInterpreterCallCompletedEvent(ResponseStreamEventType.ResponseCodeInterpreterCallCompleted, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCodeInterpreterCallInProgressEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response for which the code interpreter call is in progress. </param>
        /// <param name="itemId"> The unique identifier of the code interpreter tool call item. </param>
        /// <returns> A new <see cref="Models.ResponseCodeInterpreterCallInProgressEvent"/> instance for mocking. </returns>
        public static ResponseCodeInterpreterCallInProgressEvent ResponseCodeInterpreterCallInProgressEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseCodeInterpreterCallInProgressEvent(ResponseStreamEventType.ResponseCodeInterpreterCallInProgress, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseCodeInterpreterCallInterpretingEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="outputIndex"> The index of the output item in the response for which the code interpreter is interpreting code. </param>
        /// <param name="itemId"> The unique identifier of the code interpreter tool call item. </param>
        /// <returns> A new <see cref="Models.ResponseCodeInterpreterCallInterpretingEvent"/> instance for mocking. </returns>
        public static ResponseCodeInterpreterCallInterpretingEvent ResponseCodeInterpreterCallInterpretingEvent(int sequenceNumber = default, int outputIndex = default, string itemId = null)
        {
            return new ResponseCodeInterpreterCallInterpretingEvent(ResponseStreamEventType.ResponseCodeInterpreterCallInterpreting, sequenceNumber, serializedAdditionalRawData: null, outputIndex, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteResponseResponse"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="deleted"></param>
        /// <returns> A new <see cref="Models.DeleteResponseResponse"/> instance for mocking. </returns>
        public static DeleteResponseResponse DeleteResponseResponse(string id = null, DeleteResponseResponseObject @object = default, bool deleted = default)
        {
            return new DeleteResponseResponse(id, @object, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResponseItemList"/>. </summary>
        /// <param name="object"> The type of object returned, must be `list`. </param>
        /// <param name="data">
        /// A list of items used to generate this response.
        /// Please note <see cref="Models.ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="Models.CodeInterpreterToolCallItemResource"/>, <see cref="Models.ComputerToolCallItemResource"/>, <see cref="Models.ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="Models.FileSearchToolCallItemResource"/>, <see cref="Models.FunctionToolCallItemResource"/>, <see cref="Models.FunctionToolCallOutputItemResource"/>, <see cref="Models.ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="Models.LocalShellToolCallItemResource"/>, <see cref="Models.LocalShellToolCallOutputItemResource"/>, <see cref="Models.MCPApprovalRequestItemResource"/>, <see cref="Models.MCPApprovalResponseItemResource"/>, <see cref="Models.MCPCallItemResource"/>, <see cref="Models.MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="Models.ReasoningItemResource"/>, <see cref="Models.SemanticEventsOutputItemResource"/>, <see cref="Models.StructuredInputsItemResource"/>, <see cref="Models.StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="Models.WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <param name="hasMore"> Whether there are more items available. </param>
        /// <param name="firstId"> The ID of the first item in the list. </param>
        /// <param name="lastId"> The ID of the last item in the list. </param>
        /// <returns> A new <see cref="Models.ResponseItemList"/> instance for mocking. </returns>
        public static ResponseItemList ResponseItemList(ResponseItemListObject @object = default, IEnumerable<ItemResource> data = null, bool hasMore = default, string firstId = null, string lastId = null)
        {
            data ??= new List<ItemResource>();

            return new ResponseItemList(
                @object,
                data?.ToList(),
                hasMore,
                firstId,
                lastId,
                serializedAdditionalRawData: null);
        }
    }
}
