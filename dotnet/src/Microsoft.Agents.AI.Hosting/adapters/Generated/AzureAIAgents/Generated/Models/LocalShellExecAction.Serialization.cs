// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    public partial class LocalShellExecAction : IJsonModel<LocalShellExecAction>
    {
        void IJsonModel<LocalShellExecAction>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LocalShellExecAction>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LocalShellExecAction)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            writer.WritePropertyName("command"u8);
            writer.WriteStartArray();
            foreach (var item in Command)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(TimeoutMs))
            {
                if (TimeoutMs != null)
                {
                    writer.WritePropertyName("timeout_ms"u8);
                    writer.WriteNumberValue(TimeoutMs.Value);
                }
                else
                {
                    writer.WriteNull("timeout_ms");
                }
            }
            if (Optional.IsDefined(WorkingDirectory))
            {
                if (WorkingDirectory != null)
                {
                    writer.WritePropertyName("working_directory"u8);
                    writer.WriteStringValue(WorkingDirectory);
                }
                else
                {
                    writer.WriteNull("working_directory");
                }
            }
            writer.WritePropertyName("env"u8);
            writer.WriteStartObject();
            foreach (var item in Env)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            if (Optional.IsDefined(User))
            {
                if (User != null)
                {
                    writer.WritePropertyName("user"u8);
                    writer.WriteStringValue(User);
                }
                else
                {
                    writer.WriteNull("user");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        LocalShellExecAction IJsonModel<LocalShellExecAction>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LocalShellExecAction>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LocalShellExecAction)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLocalShellExecAction(document.RootElement, options);
        }

        internal static LocalShellExecAction DeserializeLocalShellExecAction(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            LocalShellExecActionType type = default;
            IList<string> command = default;
            int? timeoutMs = default;
            string workingDirectory = default;
            IDictionary<string, string> env = default;
            string user = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = new LocalShellExecActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("command"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    command = array;
                    continue;
                }
                if (property.NameEquals("timeout_ms"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        timeoutMs = null;
                        continue;
                    }
                    timeoutMs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("working_directory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        workingDirectory = null;
                        continue;
                    }
                    workingDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("env"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    env = dictionary;
                    continue;
                }
                if (property.NameEquals("user"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        user = null;
                        continue;
                    }
                    user = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new LocalShellExecAction(
                type,
                command,
                timeoutMs,
                workingDirectory,
                env,
                user,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<LocalShellExecAction>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LocalShellExecAction>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(LocalShellExecAction)} does not support writing '{options.Format}' format.");
            }
        }

        LocalShellExecAction IPersistableModel<LocalShellExecAction>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LocalShellExecAction>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeLocalShellExecAction(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(LocalShellExecAction)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<LocalShellExecAction>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static LocalShellExecAction FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeLocalShellExecAction(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal virtual BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
