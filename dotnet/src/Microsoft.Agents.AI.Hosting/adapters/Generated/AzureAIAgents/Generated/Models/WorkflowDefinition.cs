// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> The workflow specification in CPSDL format. </summary>
    public partial class WorkflowDefinition : AgentDefinition
    {
        /// <summary> Initializes a new instance of <see cref="WorkflowDefinition"/>. </summary>
        /// <param name="actions"> The workflow actions in CPSDL format. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="actions"/> is null. </exception>
        public WorkflowDefinition(IEnumerable<BinaryData> actions)
        {
            Argument.AssertNotNull(actions, nameof(actions));

            Kind = AgentKind.Workflow;
            Actions = actions.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowDefinition"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="actions"> The workflow actions in CPSDL format. </param>
        internal WorkflowDefinition(AgentKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<BinaryData> actions) : base(kind, serializedAdditionalRawData)
        {
            Actions = actions;
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowDefinition"/> for deserialization. </summary>
        internal WorkflowDefinition()
        {
        }

        /// <summary>
        /// The workflow actions in CPSDL format
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IList<BinaryData> Actions { get; }
    }
}
