// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> A path to a file. </summary>
    public partial class AnnotationFilePath : Annotation
    {
        /// <summary> Initializes a new instance of <see cref="AnnotationFilePath"/>. </summary>
        /// <param name="fileId"> The ID of the file. </param>
        /// <param name="index"> The index of the file in the list of files. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileId"/> is null. </exception>
        public AnnotationFilePath(string fileId, int index)
        {
            Argument.AssertNotNull(fileId, nameof(fileId));

            Type = AnnotationType.FilePath;
            FileId = fileId;
            Index = index;
        }

        /// <summary> Initializes a new instance of <see cref="AnnotationFilePath"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="fileId"> The ID of the file. </param>
        /// <param name="index"> The index of the file in the list of files. </param>
        internal AnnotationFilePath(AnnotationType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string fileId, int index) : base(type, serializedAdditionalRawData)
        {
            FileId = fileId;
            Index = index;
        }

        /// <summary> Initializes a new instance of <see cref="AnnotationFilePath"/> for deserialization. </summary>
        internal AnnotationFilePath()
        {
        }

        /// <summary> The ID of the file. </summary>
        public string FileId { get; set; }
        /// <summary> The index of the file in the list of files. </summary>
        public int Index { get; set; }
    }
}
