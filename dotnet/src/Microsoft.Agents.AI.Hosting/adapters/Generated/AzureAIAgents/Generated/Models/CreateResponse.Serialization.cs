// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    public partial class CreateResponse : IJsonModel<CreateResponse>
    {
        void IJsonModel<CreateResponse>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateResponse>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CreateResponse)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("agent"u8);
            writer.WriteObjectValue(Agent, options);
            if (Optional.IsDefined(Conversation))
            {
                if (Conversation != null)
                {
                    writer.WritePropertyName("conversation"u8);
                    writer.WriteObjectValue(Conversation, options);
                }
                else
                {
                    writer.WriteNull("conversation");
                }
            }
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartObject();
                foreach (var item in Metadata)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Temperature))
            {
                if (Temperature != null)
                {
                    writer.WritePropertyName("temperature"u8);
                    writer.WriteNumberValue(Temperature.Value);
                }
                else
                {
                    writer.WriteNull("temperature");
                }
            }
            if (Optional.IsDefined(TopP))
            {
                if (TopP != null)
                {
                    writer.WritePropertyName("top_p"u8);
                    writer.WriteNumberValue(TopP.Value);
                }
                else
                {
                    writer.WriteNull("top_p");
                }
            }
            if (Optional.IsDefined(User))
            {
                writer.WritePropertyName("user"u8);
                writer.WriteStringValue(User);
            }
            if (Optional.IsDefined(ServiceTier))
            {
                writer.WritePropertyName("service_tier"u8);
                writer.WriteStringValue(ServiceTier.Value.ToSerialString());
            }
            if (Optional.IsDefined(TopLogprobs))
            {
                writer.WritePropertyName("top_logprobs"u8);
                writer.WriteNumberValue(TopLogprobs.Value);
            }
            if (Optional.IsDefined(PreviousResponseId))
            {
                if (PreviousResponseId != null)
                {
                    writer.WritePropertyName("previous_response_id"u8);
                    writer.WriteStringValue(PreviousResponseId);
                }
                else
                {
                    writer.WriteNull("previous_response_id");
                }
            }
            if (Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model.Value.ToString());
            }
            if (Optional.IsDefined(Reasoning))
            {
                if (Reasoning != null)
                {
                    writer.WritePropertyName("reasoning"u8);
                    writer.WriteObjectValue(Reasoning, options);
                }
                else
                {
                    writer.WriteNull("reasoning");
                }
            }
            if (Optional.IsDefined(Background))
            {
                if (Background != null)
                {
                    writer.WritePropertyName("background"u8);
                    writer.WriteBooleanValue(Background.Value);
                }
                else
                {
                    writer.WriteNull("background");
                }
            }
            if (Optional.IsDefined(MaxOutputTokens))
            {
                if (MaxOutputTokens != null)
                {
                    writer.WritePropertyName("max_output_tokens"u8);
                    writer.WriteNumberValue(MaxOutputTokens.Value);
                }
                else
                {
                    writer.WriteNull("max_output_tokens");
                }
            }
            if (Optional.IsDefined(MaxToolCalls))
            {
                if (MaxToolCalls != null)
                {
                    writer.WritePropertyName("max_tool_calls"u8);
                    writer.WriteNumberValue(MaxToolCalls.Value);
                }
                else
                {
                    writer.WriteNull("max_tool_calls");
                }
            }
            if (Optional.IsDefined(Text))
            {
                writer.WritePropertyName("text"u8);
                writer.WriteObjectValue(Text, options);
            }
            if (Optional.IsCollectionDefined(Tools))
            {
                writer.WritePropertyName("tools"u8);
                writer.WriteStartArray();
                foreach (var item in Tools)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ToolChoice))
            {
                writer.WritePropertyName("tool_choice"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(ToolChoice);
#else
                using (JsonDocument document = JsonDocument.Parse(ToolChoice, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(Prompt))
            {
                if (Prompt != null)
                {
                    writer.WritePropertyName("prompt"u8);
                    writer.WriteObjectValue(Prompt, options);
                }
                else
                {
                    writer.WriteNull("prompt");
                }
            }
            if (Optional.IsDefined(Truncation))
            {
                if (Truncation != null)
                {
                    writer.WritePropertyName("truncation"u8);
                    writer.WriteStringValue(Truncation.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("truncation");
                }
            }
            if (Optional.IsDefined(Input))
            {
                writer.WritePropertyName("input"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Input);
#else
                using (JsonDocument document = JsonDocument.Parse(Input, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsCollectionDefined(Include))
            {
                if (Include != null)
                {
                    writer.WritePropertyName("include"u8);
                    writer.WriteStartArray();
                    foreach (var item in Include)
                    {
                        writer.WriteStringValue(item.ToSerialString());
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("include");
                }
            }
            if (Optional.IsDefined(ParallelToolCalls))
            {
                if (ParallelToolCalls != null)
                {
                    writer.WritePropertyName("parallel_tool_calls"u8);
                    writer.WriteBooleanValue(ParallelToolCalls.Value);
                }
                else
                {
                    writer.WriteNull("parallel_tool_calls");
                }
            }
            if (Optional.IsDefined(Store))
            {
                if (Store != null)
                {
                    writer.WritePropertyName("store"u8);
                    writer.WriteBooleanValue(Store.Value);
                }
                else
                {
                    writer.WriteNull("store");
                }
            }
            if (Optional.IsDefined(Instructions))
            {
                if (Instructions != null)
                {
                    writer.WritePropertyName("instructions"u8);
                    writer.WriteStringValue(Instructions);
                }
                else
                {
                    writer.WriteNull("instructions");
                }
            }
            if (Optional.IsDefined(Stream))
            {
                if (Stream != null)
                {
                    writer.WritePropertyName("stream"u8);
                    writer.WriteBooleanValue(Stream.Value);
                }
                else
                {
                    writer.WriteNull("stream");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        CreateResponse IJsonModel<CreateResponse>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateResponse>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CreateResponse)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCreateResponse(document.RootElement, options);
        }

        internal static CreateResponse DeserializeCreateResponse(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AgentReference agent = default;
            ConversationOptions conversation = default;
            IDictionary<string, string> metadata = default;
            float? temperature = default;
            float? topP = default;
            string user = default;
            ServiceTier? serviceTier = default;
            int? topLogprobs = default;
            string previousResponseId = default;
            ModelIdsResponses? model = default;
            Reasoning reasoning = default;
            bool? background = default;
            int? maxOutputTokens = default;
            int? maxToolCalls = default;
            CreateResponseText text = default;
            IList<Tool> tools = default;
            BinaryData toolChoice = default;
            Prompt prompt = default;
            CreateResponseTruncation? truncation = default;
            BinaryData input = default;
            IList<Includable> include = default;
            bool? parallelToolCalls = default;
            bool? store = default;
            string instructions = default;
            bool? stream = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("agent"u8))
                {
                    agent = AgentReference.DeserializeAgentReference(property.Value, options);
                    continue;
                }
                if (property.NameEquals("conversation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        conversation = null;
                        continue;
                    }
                    conversation = ConversationOptions.DeserializeConversationOptions(property.Value, options);
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    metadata = dictionary;
                    continue;
                }
                if (property.NameEquals("temperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        temperature = null;
                        continue;
                    }
                    temperature = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("top_p"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        topP = null;
                        continue;
                    }
                    topP = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("user"u8))
                {
                    user = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("service_tier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serviceTier = property.Value.GetString().ToServiceTier();
                    continue;
                }
                if (property.NameEquals("top_logprobs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    topLogprobs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("previous_response_id"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        previousResponseId = null;
                        continue;
                    }
                    previousResponseId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("model"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    model = new ModelIdsResponses(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reasoning"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        reasoning = null;
                        continue;
                    }
                    reasoning = Reasoning.DeserializeReasoning(property.Value, options);
                    continue;
                }
                if (property.NameEquals("background"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        background = null;
                        continue;
                    }
                    background = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("max_output_tokens"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxOutputTokens = null;
                        continue;
                    }
                    maxOutputTokens = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("max_tool_calls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxToolCalls = null;
                        continue;
                    }
                    maxToolCalls = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    text = CreateResponseText.DeserializeCreateResponseText(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tools"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Tool> array = new List<Tool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Tool.DeserializeTool(item, options));
                    }
                    tools = array;
                    continue;
                }
                if (property.NameEquals("tool_choice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toolChoice = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("prompt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        prompt = null;
                        continue;
                    }
                    prompt = Prompt.DeserializePrompt(property.Value, options);
                    continue;
                }
                if (property.NameEquals("truncation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        truncation = null;
                        continue;
                    }
                    truncation = property.Value.GetString().ToCreateResponseTruncation();
                    continue;
                }
                if (property.NameEquals("input"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    input = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("include"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Includable> array = new List<Includable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString().ToIncludable());
                    }
                    include = array;
                    continue;
                }
                if (property.NameEquals("parallel_tool_calls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        parallelToolCalls = null;
                        continue;
                    }
                    parallelToolCalls = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("store"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        store = null;
                        continue;
                    }
                    store = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("instructions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        instructions = null;
                        continue;
                    }
                    instructions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stream"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stream = null;
                        continue;
                    }
                    stream = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CreateResponse(
                agent,
                conversation,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                temperature,
                topP,
                user,
                serviceTier,
                topLogprobs,
                previousResponseId,
                model,
                reasoning,
                background,
                maxOutputTokens,
                maxToolCalls,
                text,
                tools ?? new ChangeTrackingList<Tool>(),
                toolChoice,
                prompt,
                truncation,
                input,
                include ?? new ChangeTrackingList<Includable>(),
                parallelToolCalls,
                store,
                instructions,
                stream,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CreateResponse>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateResponse>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CreateResponse)} does not support writing '{options.Format}' format.");
            }
        }

        CreateResponse IPersistableModel<CreateResponse>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateResponse>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCreateResponse(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CreateResponse)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CreateResponse>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static CreateResponse FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeCreateResponse(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal virtual BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
