// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> Emitted when there is a delta (partial update) to the reasoning summary content. </summary>
    public partial class ResponseReasoningSummaryDeltaEvent : ResponseStreamEvent
    {
        /// <summary> Initializes a new instance of <see cref="ResponseReasoningSummaryDeltaEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The unique identifier of the item for which the reasoning summary is being updated. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="summaryIndex"> The index of the summary part within the output item. </param>
        /// <param name="delta"> The partial update to the reasoning summary content. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="itemId"/> or <paramref name="delta"/> is null. </exception>
        internal ResponseReasoningSummaryDeltaEvent(int sequenceNumber, string itemId, int outputIndex, int summaryIndex, BinaryData delta) : base(sequenceNumber)
        {
            Argument.AssertNotNull(itemId, nameof(itemId));
            Argument.AssertNotNull(delta, nameof(delta));

            Type = ResponseStreamEventType.ResponseReasoningSummaryDelta;
            ItemId = itemId;
            OutputIndex = outputIndex;
            SummaryIndex = summaryIndex;
            Delta = delta;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseReasoningSummaryDeltaEvent"/>. </summary>
        /// <param name="type"></param>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="itemId"> The unique identifier of the item for which the reasoning summary is being updated. </param>
        /// <param name="outputIndex"> The index of the output item in the response's output array. </param>
        /// <param name="summaryIndex"> The index of the summary part within the output item. </param>
        /// <param name="delta"> The partial update to the reasoning summary content. </param>
        internal ResponseReasoningSummaryDeltaEvent(ResponseStreamEventType type, int sequenceNumber, IDictionary<string, BinaryData> serializedAdditionalRawData, string itemId, int outputIndex, int summaryIndex, BinaryData delta) : base(type, sequenceNumber, serializedAdditionalRawData)
        {
            ItemId = itemId;
            OutputIndex = outputIndex;
            SummaryIndex = summaryIndex;
            Delta = delta;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseReasoningSummaryDeltaEvent"/> for deserialization. </summary>
        internal ResponseReasoningSummaryDeltaEvent()
        {
        }

        /// <summary> The unique identifier of the item for which the reasoning summary is being updated. </summary>
        public string ItemId { get; }
        /// <summary> The index of the output item in the response's output array. </summary>
        public int OutputIndex { get; }
        /// <summary> The index of the summary part within the output item. </summary>
        public int SummaryIndex { get; }
        /// <summary>
        /// The partial update to the reasoning summary content.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Delta { get; }
    }
}
