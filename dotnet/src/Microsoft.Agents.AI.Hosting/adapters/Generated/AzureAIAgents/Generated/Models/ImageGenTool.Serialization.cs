// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    public partial class ImageGenTool : IJsonModel<ImageGenTool>
    {
        void IJsonModel<ImageGenTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageGenTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageGenTool)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model.Value.ToString());
            }
            if (Optional.IsDefined(Quality))
            {
                writer.WritePropertyName("quality"u8);
                writer.WriteStringValue(Quality.Value.ToSerialString());
            }
            if (Optional.IsDefined(Size))
            {
                writer.WritePropertyName("size"u8);
                writer.WriteStringValue(Size.Value.ToSerialString());
            }
            if (Optional.IsDefined(OutputFormat))
            {
                writer.WritePropertyName("output_format"u8);
                writer.WriteStringValue(OutputFormat.Value.ToSerialString());
            }
            if (Optional.IsDefined(OutputCompression))
            {
                writer.WritePropertyName("output_compression"u8);
                writer.WriteNumberValue(OutputCompression.Value);
            }
            if (Optional.IsDefined(Moderation))
            {
                writer.WritePropertyName("moderation"u8);
                writer.WriteStringValue(Moderation.Value.ToSerialString());
            }
            if (Optional.IsDefined(Background))
            {
                writer.WritePropertyName("background"u8);
                writer.WriteStringValue(Background.Value.ToSerialString());
            }
            if (Optional.IsDefined(InputImageMask))
            {
                writer.WritePropertyName("input_image_mask"u8);
                writer.WriteObjectValue(InputImageMask, options);
            }
            if (Optional.IsDefined(PartialImages))
            {
                writer.WritePropertyName("partial_images"u8);
                writer.WriteNumberValue(PartialImages.Value);
            }
        }

        ImageGenTool IJsonModel<ImageGenTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageGenTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageGenTool)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeImageGenTool(document.RootElement, options);
        }

        internal static ImageGenTool DeserializeImageGenTool(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ImageGenToolModel? model = default;
            ImageGenToolQuality? quality = default;
            ImageGenToolSize? size = default;
            ImageGenToolOutputFormat? outputFormat = default;
            int? outputCompression = default;
            ImageGenToolModeration? moderation = default;
            ImageGenToolBackground? background = default;
            ImageGenToolInputImageMask inputImageMask = default;
            int? partialImages = default;
            ToolType type = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("model"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    model = new ImageGenToolModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("quality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quality = property.Value.GetString().ToImageGenToolQuality();
                    continue;
                }
                if (property.NameEquals("size"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    size = property.Value.GetString().ToImageGenToolSize();
                    continue;
                }
                if (property.NameEquals("output_format"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputFormat = property.Value.GetString().ToImageGenToolOutputFormat();
                    continue;
                }
                if (property.NameEquals("output_compression"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputCompression = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("moderation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    moderation = property.Value.GetString().ToImageGenToolModeration();
                    continue;
                }
                if (property.NameEquals("background"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    background = property.Value.GetString().ToImageGenToolBackground();
                    continue;
                }
                if (property.NameEquals("input_image_mask"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputImageMask = ImageGenToolInputImageMask.DeserializeImageGenToolInputImageMask(property.Value, options);
                    continue;
                }
                if (property.NameEquals("partial_images"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    partialImages = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ToolType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ImageGenTool(
                type,
                serializedAdditionalRawData,
                model,
                quality,
                size,
                outputFormat,
                outputCompression,
                moderation,
                background,
                inputImageMask,
                partialImages);
        }

        BinaryData IPersistableModel<ImageGenTool>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageGenTool>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ImageGenTool)} does not support writing '{options.Format}' format.");
            }
        }

        ImageGenTool IPersistableModel<ImageGenTool>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageGenTool>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeImageGenTool(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ImageGenTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ImageGenTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static new ImageGenTool FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeImageGenTool(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal override BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
