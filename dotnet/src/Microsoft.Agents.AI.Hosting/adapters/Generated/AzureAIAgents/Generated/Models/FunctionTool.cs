// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling). </summary>
    public partial class FunctionTool : Tool
    {
        /// <summary> Initializes a new instance of <see cref="FunctionTool"/>. </summary>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="parameters"> A JSON schema object describing the parameters of the function. </param>
        /// <param name="strict"> Whether to enforce strict parameter validation. Default `true`. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public FunctionTool(string name, BinaryData parameters, bool? strict)
        {
            Argument.AssertNotNull(name, nameof(name));

            Type = ToolType.Function;
            Name = name;
            Parameters = parameters;
            Strict = strict;
        }

        /// <summary> Initializes a new instance of <see cref="FunctionTool"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="description"> A description of the function. Used by the model to determine whether or not to call the function. </param>
        /// <param name="parameters"> A JSON schema object describing the parameters of the function. </param>
        /// <param name="strict"> Whether to enforce strict parameter validation. Default `true`. </param>
        internal FunctionTool(ToolType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string name, string description, BinaryData parameters, bool? strict) : base(type, serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            Parameters = parameters;
            Strict = strict;
        }

        /// <summary> Initializes a new instance of <see cref="FunctionTool"/> for deserialization. </summary>
        internal FunctionTool()
        {
        }

        /// <summary> The name of the function to call. </summary>
        public string Name { get; set; }
        /// <summary> A description of the function. Used by the model to determine whether or not to call the function. </summary>
        public string Description { get; set; }
        /// <summary>
        /// A JSON schema object describing the parameters of the function.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Parameters { get; set; }
        /// <summary> Whether to enforce strict parameter validation. Default `true`. </summary>
        public bool? Strict { get; set; }
    }
}
