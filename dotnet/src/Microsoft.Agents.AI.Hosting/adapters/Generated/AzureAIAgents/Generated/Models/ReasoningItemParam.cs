// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// A description of the chain of thought used by a reasoning model while generating
    /// a response. Be sure to include these items in your `input` to the Responses API
    /// for subsequent turns of a conversation if you are manually
    /// [managing context](/docs/guides/conversation-state).
    ///
    /// </summary>
    public partial class ReasoningItemParam : ItemParam
    {
        /// <summary> Initializes a new instance of <see cref="ReasoningItemParam"/>. </summary>
        /// <param name="summary">
        /// Reasoning text contents.
        /// Please note <see cref="ReasoningItemSummaryPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReasoningItemSummaryTextPart"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summary"/> is null. </exception>
        public ReasoningItemParam(IEnumerable<ReasoningItemSummaryPart> summary)
        {
            Argument.AssertNotNull(summary, nameof(summary));

            Type = ItemType.Reasoning;
            Summary = summary.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ReasoningItemParam"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="encryptedContent">
        /// The encrypted content of the reasoning item - populated when a response is
        /// generated with `reasoning.encrypted_content` in the `include` parameter.
        /// </param>
        /// <param name="summary">
        /// Reasoning text contents.
        /// Please note <see cref="ReasoningItemSummaryPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReasoningItemSummaryTextPart"/>.
        /// </param>
        internal ReasoningItemParam(ItemType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string encryptedContent, IList<ReasoningItemSummaryPart> summary) : base(type, serializedAdditionalRawData)
        {
            EncryptedContent = encryptedContent;
            Summary = summary;
        }

        /// <summary> Initializes a new instance of <see cref="ReasoningItemParam"/> for deserialization. </summary>
        internal ReasoningItemParam()
        {
        }

        /// <summary>
        /// The encrypted content of the reasoning item - populated when a response is
        /// generated with `reasoning.encrypted_content` in the `include` parameter.
        /// </summary>
        public string EncryptedContent { get; set; }
        /// <summary>
        /// Reasoning text contents.
        /// Please note <see cref="ReasoningItemSummaryPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReasoningItemSummaryTextPart"/>.
        /// </summary>
        public IList<ReasoningItemSummaryPart> Summary { get; }
    }
}
