// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    public partial class CodeInterpreterToolCallItemParam : IJsonModel<CodeInterpreterToolCallItemParam>
    {
        void IJsonModel<CodeInterpreterToolCallItemParam>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolCallItemParam>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodeInterpreterToolCallItemParam)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("container_id"u8);
            writer.WriteStringValue(ContainerId);
            if (Code != null)
            {
                writer.WritePropertyName("code"u8);
                writer.WriteStringValue(Code);
            }
            else
            {
                writer.WriteNull("code");
            }
            if (Outputs != null && Optional.IsCollectionDefined(Outputs))
            {
                writer.WritePropertyName("outputs"u8);
                writer.WriteStartArray();
                foreach (var item in Outputs)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNull("outputs");
            }
        }

        CodeInterpreterToolCallItemParam IJsonModel<CodeInterpreterToolCallItemParam>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolCallItemParam>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodeInterpreterToolCallItemParam)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCodeInterpreterToolCallItemParam(document.RootElement, options);
        }

        internal static CodeInterpreterToolCallItemParam DeserializeCodeInterpreterToolCallItemParam(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string containerId = default;
            string code = default;
            IList<CodeInterpreterOutput> outputs = default;
            ItemType type = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("container_id"u8))
                {
                    containerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("code"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        code = null;
                        continue;
                    }
                    code = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        outputs = new ChangeTrackingList<CodeInterpreterOutput>();
                        continue;
                    }
                    List<CodeInterpreterOutput> array = new List<CodeInterpreterOutput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodeInterpreterOutput.DeserializeCodeInterpreterOutput(item, options));
                    }
                    outputs = array;
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ItemType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CodeInterpreterToolCallItemParam(type, serializedAdditionalRawData, containerId, code, outputs);
        }

        BinaryData IPersistableModel<CodeInterpreterToolCallItemParam>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolCallItemParam>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CodeInterpreterToolCallItemParam)} does not support writing '{options.Format}' format.");
            }
        }

        CodeInterpreterToolCallItemParam IPersistableModel<CodeInterpreterToolCallItemParam>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolCallItemParam>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCodeInterpreterToolCallItemParam(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CodeInterpreterToolCallItemParam)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CodeInterpreterToolCallItemParam>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static new CodeInterpreterToolCallItemParam FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeCodeInterpreterToolCallItemParam(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal override BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
