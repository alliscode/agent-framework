// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// An object specifying the format that the model must output.
    ///
    /// Configuring `{ "type": "json_schema" }` enables Structured Outputs,
    /// which ensures the model will match your supplied JSON schema. Learn more in the
    /// [Structured Outputs guide](/docs/guides/structured-outputs).
    ///
    /// The default format is `{ "type": "text" }` with no additional options.
    ///
    /// **Not recommended for gpt-4o and newer models:**
    ///
    /// Setting to `{ "type": "json_object" }` enables the older JSON mode, which
    /// ensures the message the model generates is valid JSON. Using `json_schema`
    /// is preferred for models that support it.
    /// </summary>
    internal readonly partial struct ResponseTextFormatConfigurationType : IEquatable<ResponseTextFormatConfigurationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResponseTextFormatConfigurationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResponseTextFormatConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TextValue = "text";
        private const string JsonSchemaValue = "json_schema";
        private const string JsonObjectValue = "json_object";

        /// <summary> text. </summary>
        public static ResponseTextFormatConfigurationType Text { get; } = new ResponseTextFormatConfigurationType(TextValue);
        /// <summary> json_schema. </summary>
        public static ResponseTextFormatConfigurationType JsonSchema { get; } = new ResponseTextFormatConfigurationType(JsonSchemaValue);
        /// <summary> json_object. </summary>
        public static ResponseTextFormatConfigurationType JsonObject { get; } = new ResponseTextFormatConfigurationType(JsonObjectValue);
        /// <summary> Determines if two <see cref="ResponseTextFormatConfigurationType"/> values are the same. </summary>
        public static bool operator ==(ResponseTextFormatConfigurationType left, ResponseTextFormatConfigurationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResponseTextFormatConfigurationType"/> values are not the same. </summary>
        public static bool operator !=(ResponseTextFormatConfigurationType left, ResponseTextFormatConfigurationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResponseTextFormatConfigurationType"/>. </summary>
        public static implicit operator ResponseTextFormatConfigurationType(string value) => new ResponseTextFormatConfigurationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResponseTextFormatConfigurationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResponseTextFormatConfigurationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
