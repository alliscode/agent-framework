// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary> The LocalShellExecActionType. </summary>
    public readonly partial struct LocalShellExecActionType : IEquatable<LocalShellExecActionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LocalShellExecActionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LocalShellExecActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExecValue = "exec";

        /// <summary> exec. </summary>
        public static LocalShellExecActionType Exec { get; } = new LocalShellExecActionType(ExecValue);
        /// <summary> Determines if two <see cref="LocalShellExecActionType"/> values are the same. </summary>
        public static bool operator ==(LocalShellExecActionType left, LocalShellExecActionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LocalShellExecActionType"/> values are not the same. </summary>
        public static bool operator !=(LocalShellExecActionType left, LocalShellExecActionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LocalShellExecActionType"/>. </summary>
        public static implicit operator LocalShellExecActionType(string value) => new LocalShellExecActionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LocalShellExecActionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LocalShellExecActionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
