// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    public partial class MCPTool : IJsonModel<MCPTool>
    {
        void IJsonModel<MCPTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MCPTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MCPTool)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("server_label"u8);
            writer.WriteStringValue(ServerLabel);
            writer.WritePropertyName("server_url"u8);
            writer.WriteStringValue(ServerUrl);
            if (Optional.IsCollectionDefined(Headers))
            {
                if (Headers != null)
                {
                    writer.WritePropertyName("headers"u8);
                    writer.WriteStartObject();
                    foreach (var item in Headers)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("headers");
                }
            }
            if (Optional.IsDefined(AllowedTools))
            {
                if (AllowedTools != null)
                {
                    writer.WritePropertyName("allowed_tools"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(AllowedTools);
#else
                    using (JsonDocument document = JsonDocument.Parse(AllowedTools, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                else
                {
                    writer.WriteNull("allowed_tools");
                }
            }
            if (Optional.IsDefined(RequireApproval))
            {
                if (RequireApproval != null)
                {
                    writer.WritePropertyName("require_approval"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(RequireApproval);
#else
                    using (JsonDocument document = JsonDocument.Parse(RequireApproval, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                else
                {
                    writer.WriteNull("require_approval");
                }
            }
        }

        MCPTool IJsonModel<MCPTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MCPTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MCPTool)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMCPTool(document.RootElement, options);
        }

        internal static MCPTool DeserializeMCPTool(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string serverLabel = default;
            string serverUrl = default;
            IDictionary<string, string> headers = default;
            BinaryData allowedTools = default;
            BinaryData requireApproval = default;
            ToolType type = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("server_label"u8))
                {
                    serverLabel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("server_url"u8))
                {
                    serverUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    headers = dictionary;
                    continue;
                }
                if (property.NameEquals("allowed_tools"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        allowedTools = null;
                        continue;
                    }
                    allowedTools = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("require_approval"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requireApproval = null;
                        continue;
                    }
                    requireApproval = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ToolType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MCPTool(
                type,
                serializedAdditionalRawData,
                serverLabel,
                serverUrl,
                headers ?? new ChangeTrackingDictionary<string, string>(),
                allowedTools,
                requireApproval);
        }

        BinaryData IPersistableModel<MCPTool>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MCPTool>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MCPTool)} does not support writing '{options.Format}' format.");
            }
        }

        MCPTool IPersistableModel<MCPTool>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MCPTool>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMCPTool(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MCPTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MCPTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static new MCPTool FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeMCPTool(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal override BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
