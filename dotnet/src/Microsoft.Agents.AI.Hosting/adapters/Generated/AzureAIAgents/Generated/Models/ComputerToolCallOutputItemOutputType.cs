// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary> A computer screenshot image used with the computer use tool. </summary>
    internal readonly partial struct ComputerToolCallOutputItemOutputType : IEquatable<ComputerToolCallOutputItemOutputType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputerToolCallOutputItemOutputType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputerToolCallOutputItemOutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ScreenshotValue = "computer_screenshot";

        /// <summary> computer_screenshot. </summary>
        public static ComputerToolCallOutputItemOutputType Screenshot { get; } = new ComputerToolCallOutputItemOutputType(ScreenshotValue);
        /// <summary> Determines if two <see cref="ComputerToolCallOutputItemOutputType"/> values are the same. </summary>
        public static bool operator ==(ComputerToolCallOutputItemOutputType left, ComputerToolCallOutputItemOutputType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputerToolCallOutputItemOutputType"/> values are not the same. </summary>
        public static bool operator !=(ComputerToolCallOutputItemOutputType left, ComputerToolCallOutputItemOutputType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ComputerToolCallOutputItemOutputType"/>. </summary>
        public static implicit operator ComputerToolCallOutputItemOutputType(string value) => new ComputerToolCallOutputItemOutputType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputerToolCallOutputItemOutputType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputerToolCallOutputItemOutputType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
