// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary> The ResponseStreamEventType. </summary>
    public readonly partial struct ResponseStreamEventType : IEquatable<ResponseStreamEventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResponseStreamEventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResponseStreamEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ResponseAudioDeltaValue = "response.audio.delta";
        private const string ResponseAudioDoneValue = "response.audio.done";
        private const string ResponseAudioTranscriptDeltaValue = "response.audio_transcript.delta";
        private const string ResponseAudioTranscriptDoneValue = "response.audio_transcript.done";
        private const string ResponseCodeInterpreterCallCodeDeltaValue = "response.code_interpreter_call_code.delta";
        private const string ResponseCodeInterpreterCallCodeDoneValue = "response.code_interpreter_call_code.done";
        private const string ResponseCodeInterpreterCallCompletedValue = "response.code_interpreter_call.completed";
        private const string ResponseCodeInterpreterCallInProgressValue = "response.code_interpreter_call.in_progress";
        private const string ResponseCodeInterpreterCallInterpretingValue = "response.code_interpreter_call.interpreting";
        private const string ResponseCompletedValue = "response.completed";
        private const string ResponseContentPartAddedValue = "response.content_part.added";
        private const string ResponseContentPartDoneValue = "response.content_part.done";
        private const string ResponseCreatedValue = "response.created";
        private const string ErrorValue = "error";
        private const string ResponseFileSearchCallCompletedValue = "response.file_search_call.completed";
        private const string ResponseFileSearchCallInProgressValue = "response.file_search_call.in_progress";
        private const string ResponseFileSearchCallSearchingValue = "response.file_search_call.searching";
        private const string ResponseFunctionCallArgumentsDeltaValue = "response.function_call_arguments.delta";
        private const string ResponseFunctionCallArgumentsDoneValue = "response.function_call_arguments.done";
        private const string ResponseInProgressValue = "response.in_progress";
        private const string ResponseFailedValue = "response.failed";
        private const string ResponseIncompleteValue = "response.incomplete";
        private const string ResponseOutputItemAddedValue = "response.output_item.added";
        private const string ResponseOutputItemDoneValue = "response.output_item.done";
        private const string ResponseRefusalDeltaValue = "response.refusal.delta";
        private const string ResponseRefusalDoneValue = "response.refusal.done";
        private const string ResponseOutputTextAnnotationAddedValue = "response.output_text.annotation.added";
        private const string ResponseOutputTextDeltaValue = "response.output_text.delta";
        private const string ResponseOutputTextDoneValue = "response.output_text.done";
        private const string ResponseReasoningSummaryPartAddedValue = "response.reasoning_summary_part.added";
        private const string ResponseReasoningSummaryPartDoneValue = "response.reasoning_summary_part.done";
        private const string ResponseReasoningSummaryTextDeltaValue = "response.reasoning_summary_text.delta";
        private const string ResponseReasoningSummaryTextDoneValue = "response.reasoning_summary_text.done";
        private const string ResponseWebSearchCallCompletedValue = "response.web_search_call.completed";
        private const string ResponseWebSearchCallInProgressValue = "response.web_search_call.in_progress";
        private const string ResponseWebSearchCallSearchingValue = "response.web_search_call.searching";
        private const string ResponseImageGenerationCallCompletedValue = "response.image_generation_call.completed";
        private const string ResponseImageGenerationCallGeneratingValue = "response.image_generation_call.generating";
        private const string ResponseImageGenerationCallInProgressValue = "response.image_generation_call.in_progress";
        private const string ResponseImageGenerationCallPartialImageValue = "response.image_generation_call.partial_image";
        private const string ResponseMcpCallArgumentsDeltaValue = "response.mcp_call.arguments_delta";
        private const string ResponseMcpCallArgumentsDoneValue = "response.mcp_call.arguments_done";
        private const string ResponseMcpCallCompletedValue = "response.mcp_call.completed";
        private const string ResponseMcpCallFailedValue = "response.mcp_call.failed";
        private const string ResponseMcpCallInProgressValue = "response.mcp_call.in_progress";
        private const string ResponseMcpListToolsCompletedValue = "response.mcp_list_tools.completed";
        private const string ResponseMcpListToolsFailedValue = "response.mcp_list_tools.failed";
        private const string ResponseMcpListToolsInProgressValue = "response.mcp_list_tools.in_progress";
        private const string ResponseQueuedValue = "response.queued";
        private const string ResponseReasoningDeltaValue = "response.reasoning.delta";
        private const string ResponseReasoningDoneValue = "response.reasoning.done";
        private const string ResponseReasoningSummaryDeltaValue = "response.reasoning_summary.delta";
        private const string ResponseReasoningSummaryDoneValue = "response.reasoning_summary.done";

        /// <summary> response.audio.delta. </summary>
        public static ResponseStreamEventType ResponseAudioDelta { get; } = new ResponseStreamEventType(ResponseAudioDeltaValue);
        /// <summary> response.audio.done. </summary>
        public static ResponseStreamEventType ResponseAudioDone { get; } = new ResponseStreamEventType(ResponseAudioDoneValue);
        /// <summary> response.audio_transcript.delta. </summary>
        public static ResponseStreamEventType ResponseAudioTranscriptDelta { get; } = new ResponseStreamEventType(ResponseAudioTranscriptDeltaValue);
        /// <summary> response.audio_transcript.done. </summary>
        public static ResponseStreamEventType ResponseAudioTranscriptDone { get; } = new ResponseStreamEventType(ResponseAudioTranscriptDoneValue);
        /// <summary> response.code_interpreter_call_code.delta. </summary>
        public static ResponseStreamEventType ResponseCodeInterpreterCallCodeDelta { get; } = new ResponseStreamEventType(ResponseCodeInterpreterCallCodeDeltaValue);
        /// <summary> response.code_interpreter_call_code.done. </summary>
        public static ResponseStreamEventType ResponseCodeInterpreterCallCodeDone { get; } = new ResponseStreamEventType(ResponseCodeInterpreterCallCodeDoneValue);
        /// <summary> response.code_interpreter_call.completed. </summary>
        public static ResponseStreamEventType ResponseCodeInterpreterCallCompleted { get; } = new ResponseStreamEventType(ResponseCodeInterpreterCallCompletedValue);
        /// <summary> response.code_interpreter_call.in_progress. </summary>
        public static ResponseStreamEventType ResponseCodeInterpreterCallInProgress { get; } = new ResponseStreamEventType(ResponseCodeInterpreterCallInProgressValue);
        /// <summary> response.code_interpreter_call.interpreting. </summary>
        public static ResponseStreamEventType ResponseCodeInterpreterCallInterpreting { get; } = new ResponseStreamEventType(ResponseCodeInterpreterCallInterpretingValue);
        /// <summary> response.completed. </summary>
        public static ResponseStreamEventType ResponseCompleted { get; } = new ResponseStreamEventType(ResponseCompletedValue);
        /// <summary> response.content_part.added. </summary>
        public static ResponseStreamEventType ResponseContentPartAdded { get; } = new ResponseStreamEventType(ResponseContentPartAddedValue);
        /// <summary> response.content_part.done. </summary>
        public static ResponseStreamEventType ResponseContentPartDone { get; } = new ResponseStreamEventType(ResponseContentPartDoneValue);
        /// <summary> response.created. </summary>
        public static ResponseStreamEventType ResponseCreated { get; } = new ResponseStreamEventType(ResponseCreatedValue);
        /// <summary> error. </summary>
        public static ResponseStreamEventType Error { get; } = new ResponseStreamEventType(ErrorValue);
        /// <summary> response.file_search_call.completed. </summary>
        public static ResponseStreamEventType ResponseFileSearchCallCompleted { get; } = new ResponseStreamEventType(ResponseFileSearchCallCompletedValue);
        /// <summary> response.file_search_call.in_progress. </summary>
        public static ResponseStreamEventType ResponseFileSearchCallInProgress { get; } = new ResponseStreamEventType(ResponseFileSearchCallInProgressValue);
        /// <summary> response.file_search_call.searching. </summary>
        public static ResponseStreamEventType ResponseFileSearchCallSearching { get; } = new ResponseStreamEventType(ResponseFileSearchCallSearchingValue);
        /// <summary> response.function_call_arguments.delta. </summary>
        public static ResponseStreamEventType ResponseFunctionCallArgumentsDelta { get; } = new ResponseStreamEventType(ResponseFunctionCallArgumentsDeltaValue);
        /// <summary> response.function_call_arguments.done. </summary>
        public static ResponseStreamEventType ResponseFunctionCallArgumentsDone { get; } = new ResponseStreamEventType(ResponseFunctionCallArgumentsDoneValue);
        /// <summary> response.in_progress. </summary>
        public static ResponseStreamEventType ResponseInProgress { get; } = new ResponseStreamEventType(ResponseInProgressValue);
        /// <summary> response.failed. </summary>
        public static ResponseStreamEventType ResponseFailed { get; } = new ResponseStreamEventType(ResponseFailedValue);
        /// <summary> response.incomplete. </summary>
        public static ResponseStreamEventType ResponseIncomplete { get; } = new ResponseStreamEventType(ResponseIncompleteValue);
        /// <summary> response.output_item.added. </summary>
        public static ResponseStreamEventType ResponseOutputItemAdded { get; } = new ResponseStreamEventType(ResponseOutputItemAddedValue);
        /// <summary> response.output_item.done. </summary>
        public static ResponseStreamEventType ResponseOutputItemDone { get; } = new ResponseStreamEventType(ResponseOutputItemDoneValue);
        /// <summary> response.refusal.delta. </summary>
        public static ResponseStreamEventType ResponseRefusalDelta { get; } = new ResponseStreamEventType(ResponseRefusalDeltaValue);
        /// <summary> response.refusal.done. </summary>
        public static ResponseStreamEventType ResponseRefusalDone { get; } = new ResponseStreamEventType(ResponseRefusalDoneValue);
        /// <summary> response.output_text.annotation.added. </summary>
        public static ResponseStreamEventType ResponseOutputTextAnnotationAdded { get; } = new ResponseStreamEventType(ResponseOutputTextAnnotationAddedValue);
        /// <summary> response.output_text.delta. </summary>
        public static ResponseStreamEventType ResponseOutputTextDelta { get; } = new ResponseStreamEventType(ResponseOutputTextDeltaValue);
        /// <summary> response.output_text.done. </summary>
        public static ResponseStreamEventType ResponseOutputTextDone { get; } = new ResponseStreamEventType(ResponseOutputTextDoneValue);
        /// <summary> response.reasoning_summary_part.added. </summary>
        public static ResponseStreamEventType ResponseReasoningSummaryPartAdded { get; } = new ResponseStreamEventType(ResponseReasoningSummaryPartAddedValue);
        /// <summary> response.reasoning_summary_part.done. </summary>
        public static ResponseStreamEventType ResponseReasoningSummaryPartDone { get; } = new ResponseStreamEventType(ResponseReasoningSummaryPartDoneValue);
        /// <summary> response.reasoning_summary_text.delta. </summary>
        public static ResponseStreamEventType ResponseReasoningSummaryTextDelta { get; } = new ResponseStreamEventType(ResponseReasoningSummaryTextDeltaValue);
        /// <summary> response.reasoning_summary_text.done. </summary>
        public static ResponseStreamEventType ResponseReasoningSummaryTextDone { get; } = new ResponseStreamEventType(ResponseReasoningSummaryTextDoneValue);
        /// <summary> response.web_search_call.completed. </summary>
        public static ResponseStreamEventType ResponseWebSearchCallCompleted { get; } = new ResponseStreamEventType(ResponseWebSearchCallCompletedValue);
        /// <summary> response.web_search_call.in_progress. </summary>
        public static ResponseStreamEventType ResponseWebSearchCallInProgress { get; } = new ResponseStreamEventType(ResponseWebSearchCallInProgressValue);
        /// <summary> response.web_search_call.searching. </summary>
        public static ResponseStreamEventType ResponseWebSearchCallSearching { get; } = new ResponseStreamEventType(ResponseWebSearchCallSearchingValue);
        /// <summary> response.image_generation_call.completed. </summary>
        public static ResponseStreamEventType ResponseImageGenerationCallCompleted { get; } = new ResponseStreamEventType(ResponseImageGenerationCallCompletedValue);
        /// <summary> response.image_generation_call.generating. </summary>
        public static ResponseStreamEventType ResponseImageGenerationCallGenerating { get; } = new ResponseStreamEventType(ResponseImageGenerationCallGeneratingValue);
        /// <summary> response.image_generation_call.in_progress. </summary>
        public static ResponseStreamEventType ResponseImageGenerationCallInProgress { get; } = new ResponseStreamEventType(ResponseImageGenerationCallInProgressValue);
        /// <summary> response.image_generation_call.partial_image. </summary>
        public static ResponseStreamEventType ResponseImageGenerationCallPartialImage { get; } = new ResponseStreamEventType(ResponseImageGenerationCallPartialImageValue);
        /// <summary> response.mcp_call.arguments_delta. </summary>
        public static ResponseStreamEventType ResponseMcpCallArgumentsDelta { get; } = new ResponseStreamEventType(ResponseMcpCallArgumentsDeltaValue);
        /// <summary> response.mcp_call.arguments_done. </summary>
        public static ResponseStreamEventType ResponseMcpCallArgumentsDone { get; } = new ResponseStreamEventType(ResponseMcpCallArgumentsDoneValue);
        /// <summary> response.mcp_call.completed. </summary>
        public static ResponseStreamEventType ResponseMcpCallCompleted { get; } = new ResponseStreamEventType(ResponseMcpCallCompletedValue);
        /// <summary> response.mcp_call.failed. </summary>
        public static ResponseStreamEventType ResponseMcpCallFailed { get; } = new ResponseStreamEventType(ResponseMcpCallFailedValue);
        /// <summary> response.mcp_call.in_progress. </summary>
        public static ResponseStreamEventType ResponseMcpCallInProgress { get; } = new ResponseStreamEventType(ResponseMcpCallInProgressValue);
        /// <summary> response.mcp_list_tools.completed. </summary>
        public static ResponseStreamEventType ResponseMcpListToolsCompleted { get; } = new ResponseStreamEventType(ResponseMcpListToolsCompletedValue);
        /// <summary> response.mcp_list_tools.failed. </summary>
        public static ResponseStreamEventType ResponseMcpListToolsFailed { get; } = new ResponseStreamEventType(ResponseMcpListToolsFailedValue);
        /// <summary> response.mcp_list_tools.in_progress. </summary>
        public static ResponseStreamEventType ResponseMcpListToolsInProgress { get; } = new ResponseStreamEventType(ResponseMcpListToolsInProgressValue);
        /// <summary> response.queued. </summary>
        public static ResponseStreamEventType ResponseQueued { get; } = new ResponseStreamEventType(ResponseQueuedValue);
        /// <summary> response.reasoning.delta. </summary>
        public static ResponseStreamEventType ResponseReasoningDelta { get; } = new ResponseStreamEventType(ResponseReasoningDeltaValue);
        /// <summary> response.reasoning.done. </summary>
        public static ResponseStreamEventType ResponseReasoningDone { get; } = new ResponseStreamEventType(ResponseReasoningDoneValue);
        /// <summary> response.reasoning_summary.delta. </summary>
        public static ResponseStreamEventType ResponseReasoningSummaryDelta { get; } = new ResponseStreamEventType(ResponseReasoningSummaryDeltaValue);
        /// <summary> response.reasoning_summary.done. </summary>
        public static ResponseStreamEventType ResponseReasoningSummaryDone { get; } = new ResponseStreamEventType(ResponseReasoningSummaryDoneValue);
        /// <summary> Determines if two <see cref="ResponseStreamEventType"/> values are the same. </summary>
        public static bool operator ==(ResponseStreamEventType left, ResponseStreamEventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResponseStreamEventType"/> values are not the same. </summary>
        public static bool operator !=(ResponseStreamEventType left, ResponseStreamEventType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResponseStreamEventType"/>. </summary>
        public static implicit operator ResponseStreamEventType(string value) => new ResponseStreamEventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResponseStreamEventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResponseStreamEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
