// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    [PersistableModelProxy(typeof(UnknownResponseStreamEvent))]
    public partial class ResponseStreamEvent : IJsonModel<ResponseStreamEvent>
    {
        void IJsonModel<ResponseStreamEvent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseStreamEvent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResponseStreamEvent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            writer.WritePropertyName("sequence_number"u8);
            writer.WriteNumberValue(SequenceNumber);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ResponseStreamEvent IJsonModel<ResponseStreamEvent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseStreamEvent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResponseStreamEvent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResponseStreamEvent(document.RootElement, options);
        }

        internal static ResponseStreamEvent DeserializeResponseStreamEvent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "error": return ResponseErrorEvent.DeserializeResponseErrorEvent(element, options);
                    case "response.code_interpreter_call_code.delta": return ResponseCodeInterpreterCallCodeDeltaEvent.DeserializeResponseCodeInterpreterCallCodeDeltaEvent(element, options);
                    case "response.code_interpreter_call_code.done": return ResponseCodeInterpreterCallCodeDoneEvent.DeserializeResponseCodeInterpreterCallCodeDoneEvent(element, options);
                    case "response.code_interpreter_call.completed": return ResponseCodeInterpreterCallCompletedEvent.DeserializeResponseCodeInterpreterCallCompletedEvent(element, options);
                    case "response.code_interpreter_call.in_progress": return ResponseCodeInterpreterCallInProgressEvent.DeserializeResponseCodeInterpreterCallInProgressEvent(element, options);
                    case "response.code_interpreter_call.interpreting": return ResponseCodeInterpreterCallInterpretingEvent.DeserializeResponseCodeInterpreterCallInterpretingEvent(element, options);
                    case "response.completed": return ResponseCompletedEvent.DeserializeResponseCompletedEvent(element, options);
                    case "response.content_part.added": return ResponseContentPartAddedEvent.DeserializeResponseContentPartAddedEvent(element, options);
                    case "response.content_part.done": return ResponseContentPartDoneEvent.DeserializeResponseContentPartDoneEvent(element, options);
                    case "response.created": return ResponseCreatedEvent.DeserializeResponseCreatedEvent(element, options);
                    case "response.failed": return ResponseFailedEvent.DeserializeResponseFailedEvent(element, options);
                    case "response.file_search_call.completed": return ResponseFileSearchCallCompletedEvent.DeserializeResponseFileSearchCallCompletedEvent(element, options);
                    case "response.file_search_call.in_progress": return ResponseFileSearchCallInProgressEvent.DeserializeResponseFileSearchCallInProgressEvent(element, options);
                    case "response.file_search_call.searching": return ResponseFileSearchCallSearchingEvent.DeserializeResponseFileSearchCallSearchingEvent(element, options);
                    case "response.function_call_arguments.delta": return ResponseFunctionCallArgumentsDeltaEvent.DeserializeResponseFunctionCallArgumentsDeltaEvent(element, options);
                    case "response.function_call_arguments.done": return ResponseFunctionCallArgumentsDoneEvent.DeserializeResponseFunctionCallArgumentsDoneEvent(element, options);
                    case "response.image_generation_call.completed": return ResponseImageGenCallCompletedEvent.DeserializeResponseImageGenCallCompletedEvent(element, options);
                    case "response.image_generation_call.generating": return ResponseImageGenCallGeneratingEvent.DeserializeResponseImageGenCallGeneratingEvent(element, options);
                    case "response.image_generation_call.in_progress": return ResponseImageGenCallInProgressEvent.DeserializeResponseImageGenCallInProgressEvent(element, options);
                    case "response.image_generation_call.partial_image": return ResponseImageGenCallPartialImageEvent.DeserializeResponseImageGenCallPartialImageEvent(element, options);
                    case "response.in_progress": return ResponseInProgressEvent.DeserializeResponseInProgressEvent(element, options);
                    case "response.incomplete": return ResponseIncompleteEvent.DeserializeResponseIncompleteEvent(element, options);
                    case "response.mcp_call.arguments_delta": return ResponseMCPCallArgumentsDeltaEvent.DeserializeResponseMCPCallArgumentsDeltaEvent(element, options);
                    case "response.mcp_call.arguments_done": return ResponseMCPCallArgumentsDoneEvent.DeserializeResponseMCPCallArgumentsDoneEvent(element, options);
                    case "response.mcp_call.completed": return ResponseMCPCallCompletedEvent.DeserializeResponseMCPCallCompletedEvent(element, options);
                    case "response.mcp_call.failed": return ResponseMCPCallFailedEvent.DeserializeResponseMCPCallFailedEvent(element, options);
                    case "response.mcp_call.in_progress": return ResponseMCPCallInProgressEvent.DeserializeResponseMCPCallInProgressEvent(element, options);
                    case "response.mcp_list_tools.completed": return ResponseMCPListToolsCompletedEvent.DeserializeResponseMCPListToolsCompletedEvent(element, options);
                    case "response.mcp_list_tools.failed": return ResponseMCPListToolsFailedEvent.DeserializeResponseMCPListToolsFailedEvent(element, options);
                    case "response.mcp_list_tools.in_progress": return ResponseMCPListToolsInProgressEvent.DeserializeResponseMCPListToolsInProgressEvent(element, options);
                    case "response.output_item.added": return ResponseOutputItemAddedEvent.DeserializeResponseOutputItemAddedEvent(element, options);
                    case "response.output_item.done": return ResponseOutputItemDoneEvent.DeserializeResponseOutputItemDoneEvent(element, options);
                    case "response.output_text.delta": return ResponseTextDeltaEvent.DeserializeResponseTextDeltaEvent(element, options);
                    case "response.output_text.done": return ResponseTextDoneEvent.DeserializeResponseTextDoneEvent(element, options);
                    case "response.queued": return ResponseQueuedEvent.DeserializeResponseQueuedEvent(element, options);
                    case "response.reasoning_summary_part.added": return ResponseReasoningSummaryPartAddedEvent.DeserializeResponseReasoningSummaryPartAddedEvent(element, options);
                    case "response.reasoning_summary_part.done": return ResponseReasoningSummaryPartDoneEvent.DeserializeResponseReasoningSummaryPartDoneEvent(element, options);
                    case "response.reasoning_summary_text.delta": return ResponseReasoningSummaryTextDeltaEvent.DeserializeResponseReasoningSummaryTextDeltaEvent(element, options);
                    case "response.reasoning_summary_text.done": return ResponseReasoningSummaryTextDoneEvent.DeserializeResponseReasoningSummaryTextDoneEvent(element, options);
                    case "response.reasoning_summary.delta": return ResponseReasoningSummaryDeltaEvent.DeserializeResponseReasoningSummaryDeltaEvent(element, options);
                    case "response.reasoning_summary.done": return ResponseReasoningSummaryDoneEvent.DeserializeResponseReasoningSummaryDoneEvent(element, options);
                    case "response.reasoning.delta": return ResponseReasoningDeltaEvent.DeserializeResponseReasoningDeltaEvent(element, options);
                    case "response.reasoning.done": return ResponseReasoningDoneEvent.DeserializeResponseReasoningDoneEvent(element, options);
                    case "response.refusal.delta": return ResponseRefusalDeltaEvent.DeserializeResponseRefusalDeltaEvent(element, options);
                    case "response.refusal.done": return ResponseRefusalDoneEvent.DeserializeResponseRefusalDoneEvent(element, options);
                    case "response.web_search_call.completed": return ResponseWebSearchCallCompletedEvent.DeserializeResponseWebSearchCallCompletedEvent(element, options);
                    case "response.web_search_call.in_progress": return ResponseWebSearchCallInProgressEvent.DeserializeResponseWebSearchCallInProgressEvent(element, options);
                    case "response.web_search_call.searching": return ResponseWebSearchCallSearchingEvent.DeserializeResponseWebSearchCallSearchingEvent(element, options);
                }
            }
            return UnknownResponseStreamEvent.DeserializeUnknownResponseStreamEvent(element, options);
        }

        BinaryData IPersistableModel<ResponseStreamEvent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseStreamEvent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResponseStreamEvent)} does not support writing '{options.Format}' format.");
            }
        }

        ResponseStreamEvent IPersistableModel<ResponseStreamEvent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseStreamEvent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeResponseStreamEvent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResponseStreamEvent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResponseStreamEvent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static ResponseStreamEvent FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeResponseStreamEvent(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal virtual BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
