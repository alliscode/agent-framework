// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> The AgentVersionObject. </summary>
    public partial class AgentVersionObject
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AgentVersionObject"/>. </summary>
        /// <param name="id"> The unique identifier of the agent version. </param>
        /// <param name="name"> The name of the agent. Name can be used to retrieve/update/delete the agent. </param>
        /// <param name="version"> The version identifier of the agent. Agents are immutable and every update creates a new version while keeping the name same. </param>
        /// <param name="createdAt"> The Unix timestamp (seconds) when the agent was created. </param>
        /// <param name="labels"> The labels associated with this version of the agent. Labels are used to mark specific versions of the agent for easy retrieval. </param>
        /// <param name="status"> The status of agent. </param>
        /// <param name="definition">
        /// Please note <see cref="AgentDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomAgentDefinition"/>, <see cref="PromptAgentDefinition"/> and <see cref="WorkflowDefinition"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="name"/>, <paramref name="version"/>, <paramref name="labels"/> or <paramref name="definition"/> is null. </exception>
        internal AgentVersionObject(string id, string name, string version, DateTimeOffset createdAt, IEnumerable<string> labels, AgentVersionObjectStatus status, AgentDefinition definition)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));
            Argument.AssertNotNull(labels, nameof(labels));
            Argument.AssertNotNull(definition, nameof(definition));

            Id = id;
            Name = name;
            Version = version;
            Metadata = new ChangeTrackingDictionary<string, string>();
            CreatedAt = createdAt;
            Labels = labels.ToList();
            Status = status;
            Definition = definition;
        }

        /// <summary> Initializes a new instance of <see cref="AgentVersionObject"/>. </summary>
        /// <param name="object"> The object type, which is always 'agent.version'. </param>
        /// <param name="id"> The unique identifier of the agent version. </param>
        /// <param name="name"> The name of the agent. Name can be used to retrieve/update/delete the agent. </param>
        /// <param name="version"> The version identifier of the agent. Agents are immutable and every update creates a new version while keeping the name same. </param>
        /// <param name="description"> A human-readable description of the agent. </param>
        /// <param name="metadata"> Arbitrary key-value metadata to associate with the agent. </param>
        /// <param name="createdAt"> The Unix timestamp (seconds) when the agent was created. </param>
        /// <param name="labels"> The labels associated with this version of the agent. Labels are used to mark specific versions of the agent for easy retrieval. </param>
        /// <param name="status"> The status of agent. </param>
        /// <param name="definition">
        /// Please note <see cref="AgentDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomAgentDefinition"/>, <see cref="PromptAgentDefinition"/> and <see cref="WorkflowDefinition"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AgentVersionObject(AgentVersionObjectObject @object, string id, string name, string version, string description, IReadOnlyDictionary<string, string> metadata, DateTimeOffset createdAt, IReadOnlyList<string> labels, AgentVersionObjectStatus status, AgentDefinition definition, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Object = @object;
            Id = id;
            Name = name;
            Version = version;
            Description = description;
            Metadata = metadata;
            CreatedAt = createdAt;
            Labels = labels;
            Status = status;
            Definition = definition;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AgentVersionObject"/> for deserialization. </summary>
        internal AgentVersionObject()
        {
        }

        /// <summary> The object type, which is always 'agent.version'. </summary>
        public AgentVersionObjectObject Object { get; } = AgentVersionObjectObject.AgentVersion;

        /// <summary> The unique identifier of the agent version. </summary>
        public string Id { get; }
        /// <summary> The name of the agent. Name can be used to retrieve/update/delete the agent. </summary>
        public string Name { get; }
        /// <summary> The version identifier of the agent. Agents are immutable and every update creates a new version while keeping the name same. </summary>
        public string Version { get; }
        /// <summary> A human-readable description of the agent. </summary>
        public string Description { get; }
        /// <summary> Arbitrary key-value metadata to associate with the agent. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
        /// <summary> The Unix timestamp (seconds) when the agent was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> The labels associated with this version of the agent. Labels are used to mark specific versions of the agent for easy retrieval. </summary>
        public IReadOnlyList<string> Labels { get; }
        /// <summary> The status of agent. </summary>
        public AgentVersionObjectStatus Status { get; }
        /// <summary>
        /// Gets the definition
        /// Please note <see cref="AgentDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomAgentDefinition"/>, <see cref="PromptAgentDefinition"/> and <see cref="WorkflowDefinition"/>.
        /// </summary>
        public AgentDefinition Definition { get; }
    }
}
