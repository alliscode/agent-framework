// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// Give the model access to additional tools via remote Model Context Protocol
    /// (MCP) servers. [Learn more about MCP](/docs/guides/tools-remote-mcp).
    /// </summary>
    public partial class MCPTool : Tool
    {
        /// <summary> Initializes a new instance of <see cref="MCPTool"/>. </summary>
        /// <param name="serverLabel"> A label for this MCP server, used to identify it in tool calls. </param>
        /// <param name="serverUrl"> The URL for the MCP server. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverLabel"/> or <paramref name="serverUrl"/> is null. </exception>
        public MCPTool(string serverLabel, string serverUrl)
        {
            Argument.AssertNotNull(serverLabel, nameof(serverLabel));
            Argument.AssertNotNull(serverUrl, nameof(serverUrl));

            Type = ToolType.Mcp;
            ServerLabel = serverLabel;
            ServerUrl = serverUrl;
            Headers = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="MCPTool"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="serverLabel"> A label for this MCP server, used to identify it in tool calls. </param>
        /// <param name="serverUrl"> The URL for the MCP server. </param>
        /// <param name="headers">
        /// Optional HTTP headers to send to the MCP server. Use for authentication
        /// or other purposes.
        /// </param>
        /// <param name="allowedTools"> List of allowed tool names or a filter object. </param>
        /// <param name="requireApproval"> Specify which of the MCP server's tools require approval. </param>
        internal MCPTool(ToolType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string serverLabel, string serverUrl, IDictionary<string, string> headers, BinaryData allowedTools, BinaryData requireApproval) : base(type, serializedAdditionalRawData)
        {
            ServerLabel = serverLabel;
            ServerUrl = serverUrl;
            Headers = headers;
            AllowedTools = allowedTools;
            RequireApproval = requireApproval;
        }

        /// <summary> Initializes a new instance of <see cref="MCPTool"/> for deserialization. </summary>
        internal MCPTool()
        {
        }

        /// <summary> A label for this MCP server, used to identify it in tool calls. </summary>
        public string ServerLabel { get; set; }
        /// <summary> The URL for the MCP server. </summary>
        public string ServerUrl { get; set; }
        /// <summary>
        /// Optional HTTP headers to send to the MCP server. Use for authentication
        /// or other purposes.
        /// </summary>
        public IDictionary<string, string> Headers { get; set; }
        /// <summary>
        /// List of allowed tool names or a filter object.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="IList{T}"/> where <c>T</c> is of type <see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="MCPToolAllowedTools1"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData AllowedTools { get; set; }
        /// <summary>
        /// Specify which of the MCP server's tools require approval.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="MCPToolRequireApproval1"/></description>
        /// </item>
        /// <item>
        /// <description>"always"</description>
        /// </item>
        /// <item>
        /// <description>"never"</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData RequireApproval { get; set; }
    }
}
