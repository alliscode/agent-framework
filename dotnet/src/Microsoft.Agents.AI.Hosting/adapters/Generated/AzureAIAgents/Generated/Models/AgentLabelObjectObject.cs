// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary> The AgentLabelObjectObject. </summary>
    public readonly partial struct AgentLabelObjectObject : IEquatable<AgentLabelObjectObject>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AgentLabelObjectObject"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgentLabelObjectObject(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AgentLabelValue = "agent.label";

        /// <summary> agent.label. </summary>
        public static AgentLabelObjectObject AgentLabel { get; } = new AgentLabelObjectObject(AgentLabelValue);
        /// <summary> Determines if two <see cref="AgentLabelObjectObject"/> values are the same. </summary>
        public static bool operator ==(AgentLabelObjectObject left, AgentLabelObjectObject right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgentLabelObjectObject"/> values are not the same. </summary>
        public static bool operator !=(AgentLabelObjectObject left, AgentLabelObjectObject right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AgentLabelObjectObject"/>. </summary>
        public static implicit operator AgentLabelObjectObject(string value) => new AgentLabelObjectObject(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgentLabelObjectObject other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgentLabelObjectObject other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
