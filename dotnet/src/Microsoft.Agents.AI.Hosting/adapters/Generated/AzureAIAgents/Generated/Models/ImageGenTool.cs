// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> A tool that generates images using a model like `gpt-image-1`. </summary>
    public partial class ImageGenTool : Tool
    {
        /// <summary> Initializes a new instance of <see cref="ImageGenTool"/>. </summary>
        public ImageGenTool()
        {
            Type = ToolType.ImageGeneration;
        }

        /// <summary> Initializes a new instance of <see cref="ImageGenTool"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="model"> The image generation model to use. Default: `gpt-image-1`. </param>
        /// <param name="quality">
        /// The quality of the generated image. One of `low`, `medium`, `high`,
        /// or `auto`. Default: `auto`.
        /// </param>
        /// <param name="size">
        /// The size of the generated image. One of `1024x1024`, `1024x1536`,
        /// `1536x1024`, or `auto`. Default: `auto`.
        /// </param>
        /// <param name="outputFormat">
        /// The output format of the generated image. One of `png`, `webp`, or
        /// `jpeg`. Default: `png`.
        /// </param>
        /// <param name="outputCompression"> Compression level for the output image. Default: 100. </param>
        /// <param name="moderation"> Moderation level for the generated image. Default: `auto`. </param>
        /// <param name="background">
        /// Background type for the generated image. One of `transparent`,
        /// `opaque`, or `auto`. Default: `auto`.
        /// </param>
        /// <param name="inputImageMask">
        /// Optional mask for inpainting. Contains `image_url`
        /// (string, optional) and `file_id` (string, optional).
        /// </param>
        /// <param name="partialImages"> Number of partial images to generate in streaming mode, from 0 (default value) to 3. </param>
        internal ImageGenTool(ToolType type, IDictionary<string, BinaryData> serializedAdditionalRawData, ImageGenToolModel? model, ImageGenToolQuality? quality, ImageGenToolSize? size, ImageGenToolOutputFormat? outputFormat, int? outputCompression, ImageGenToolModeration? moderation, ImageGenToolBackground? background, ImageGenToolInputImageMask inputImageMask, int? partialImages) : base(type, serializedAdditionalRawData)
        {
            Model = model;
            Quality = quality;
            Size = size;
            OutputFormat = outputFormat;
            OutputCompression = outputCompression;
            Moderation = moderation;
            Background = background;
            InputImageMask = inputImageMask;
            PartialImages = partialImages;
        }

        /// <summary> The image generation model to use. Default: `gpt-image-1`. </summary>
        public ImageGenToolModel? Model { get; set; }
        /// <summary>
        /// The quality of the generated image. One of `low`, `medium`, `high`,
        /// or `auto`. Default: `auto`.
        /// </summary>
        public ImageGenToolQuality? Quality { get; set; }
        /// <summary>
        /// The size of the generated image. One of `1024x1024`, `1024x1536`,
        /// `1536x1024`, or `auto`. Default: `auto`.
        /// </summary>
        public ImageGenToolSize? Size { get; set; }
        /// <summary>
        /// The output format of the generated image. One of `png`, `webp`, or
        /// `jpeg`. Default: `png`.
        /// </summary>
        public ImageGenToolOutputFormat? OutputFormat { get; set; }
        /// <summary> Compression level for the output image. Default: 100. </summary>
        public int? OutputCompression { get; set; }
        /// <summary> Moderation level for the generated image. Default: `auto`. </summary>
        public ImageGenToolModeration? Moderation { get; set; }
        /// <summary>
        /// Background type for the generated image. One of `transparent`,
        /// `opaque`, or `auto`. Default: `auto`.
        /// </summary>
        public ImageGenToolBackground? Background { get; set; }
        /// <summary>
        /// Optional mask for inpainting. Contains `image_url`
        /// (string, optional) and `file_id` (string, optional).
        /// </summary>
        public ImageGenToolInputImageMask InputImageMask { get; set; }
        /// <summary> Number of partial images to generate in streaming mode, from 0 (default value) to 3. </summary>
        public int? PartialImages { get; set; }
    }
}
