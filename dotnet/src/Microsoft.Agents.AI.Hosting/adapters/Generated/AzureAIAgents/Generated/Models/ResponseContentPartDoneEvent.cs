// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> Emitted when a content part is done. </summary>
    public partial class ResponseContentPartDoneEvent : ResponseStreamEvent
    {
        /// <summary> Initializes a new instance of <see cref="ResponseContentPartDoneEvent"/>. </summary>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="itemId"> The ID of the output item that the content part was added to. </param>
        /// <param name="outputIndex"> The index of the output item that the content part was added to. </param>
        /// <param name="contentIndex"> The index of the content part that is done. </param>
        /// <param name="part">
        /// The content part that is done.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="itemId"/> or <paramref name="part"/> is null. </exception>
        internal ResponseContentPartDoneEvent(int sequenceNumber, string itemId, int outputIndex, int contentIndex, ItemContent part) : base(sequenceNumber)
        {
            Argument.AssertNotNull(itemId, nameof(itemId));
            Argument.AssertNotNull(part, nameof(part));

            Type = ResponseStreamEventType.ResponseContentPartDone;
            ItemId = itemId;
            OutputIndex = outputIndex;
            ContentIndex = contentIndex;
            Part = part;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseContentPartDoneEvent"/>. </summary>
        /// <param name="type"></param>
        /// <param name="sequenceNumber"> The sequence number for this event. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="itemId"> The ID of the output item that the content part was added to. </param>
        /// <param name="outputIndex"> The index of the output item that the content part was added to. </param>
        /// <param name="contentIndex"> The index of the content part that is done. </param>
        /// <param name="part">
        /// The content part that is done.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </param>
        internal ResponseContentPartDoneEvent(ResponseStreamEventType type, int sequenceNumber, IDictionary<string, BinaryData> serializedAdditionalRawData, string itemId, int outputIndex, int contentIndex, ItemContent part) : base(type, sequenceNumber, serializedAdditionalRawData)
        {
            ItemId = itemId;
            OutputIndex = outputIndex;
            ContentIndex = contentIndex;
            Part = part;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseContentPartDoneEvent"/> for deserialization. </summary>
        internal ResponseContentPartDoneEvent()
        {
        }

        /// <summary> The ID of the output item that the content part was added to. </summary>
        public string ItemId { get; }
        /// <summary> The index of the output item that the content part was added to. </summary>
        public int OutputIndex { get; }
        /// <summary> The index of the content part that is done. </summary>
        public int ContentIndex { get; }
        /// <summary>
        /// The content part that is done.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </summary>
        public ItemContent Part { get; }
    }
}
