// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> A text output from the model. </summary>
    public partial class ItemContentOutputText : ItemContent
    {
        /// <summary> Initializes a new instance of <see cref="ItemContentOutputText"/>. </summary>
        /// <param name="text"> The text output from the model. </param>
        /// <param name="annotations">
        /// The annotations of the text output.
        /// Please note <see cref="Annotation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AnnotationFileCitation"/>, <see cref="AnnotationFilePath"/> and <see cref="AnnotationUrlCitation"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="annotations"/> is null. </exception>
        public ItemContentOutputText(string text, IEnumerable<Annotation> annotations)
        {
            Argument.AssertNotNull(text, nameof(text));
            Argument.AssertNotNull(annotations, nameof(annotations));

            Type = ItemContentType.OutputText;
            Text = text;
            Annotations = annotations.ToList();
            Logprobs = new ChangeTrackingList<LogProb>();
        }

        /// <summary> Initializes a new instance of <see cref="ItemContentOutputText"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="text"> The text output from the model. </param>
        /// <param name="annotations">
        /// The annotations of the text output.
        /// Please note <see cref="Annotation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AnnotationFileCitation"/>, <see cref="AnnotationFilePath"/> and <see cref="AnnotationUrlCitation"/>.
        /// </param>
        /// <param name="logprobs"></param>
        internal ItemContentOutputText(ItemContentType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string text, IList<Annotation> annotations, IList<LogProb> logprobs) : base(type, serializedAdditionalRawData)
        {
            Text = text;
            Annotations = annotations;
            Logprobs = logprobs;
        }

        /// <summary> Initializes a new instance of <see cref="ItemContentOutputText"/> for deserialization. </summary>
        internal ItemContentOutputText()
        {
        }

        /// <summary> The text output from the model. </summary>
        public string Text { get; set; }
        /// <summary>
        /// The annotations of the text output.
        /// Please note <see cref="Annotation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AnnotationFileCitation"/>, <see cref="AnnotationFilePath"/> and <see cref="AnnotationUrlCitation"/>.
        /// </summary>
        public IList<Annotation> Annotations { get; }
        /// <summary> Gets the logprobs. </summary>
        public IList<LogProb> Logprobs { get; }
    }
}
