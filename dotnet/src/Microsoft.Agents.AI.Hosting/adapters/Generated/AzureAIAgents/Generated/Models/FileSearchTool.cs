// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search). </summary>
    public partial class FileSearchTool : Tool
    {
        /// <summary> Initializes a new instance of <see cref="FileSearchTool"/>. </summary>
        /// <param name="vectorStoreIds"> The IDs of the vector stores to search. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vectorStoreIds"/> is null. </exception>
        public FileSearchTool(IEnumerable<string> vectorStoreIds)
        {
            Argument.AssertNotNull(vectorStoreIds, nameof(vectorStoreIds));

            Type = ToolType.FileSearch;
            VectorStoreIds = vectorStoreIds.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="FileSearchTool"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="vectorStoreIds"> The IDs of the vector stores to search. </param>
        /// <param name="maxNumResults"> The maximum number of results to return. This number should be between 1 and 50 inclusive. </param>
        /// <param name="rankingOptions"> Ranking options for search. </param>
        internal FileSearchTool(ToolType type, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<string> vectorStoreIds, int? maxNumResults, RankingOptions rankingOptions) : base(type, serializedAdditionalRawData)
        {
            VectorStoreIds = vectorStoreIds;
            MaxNumResults = maxNumResults;
            RankingOptions = rankingOptions;
        }

        /// <summary> Initializes a new instance of <see cref="FileSearchTool"/> for deserialization. </summary>
        internal FileSearchTool()
        {
        }

        /// <summary> The IDs of the vector stores to search. </summary>
        public IList<string> VectorStoreIds { get; }
        /// <summary> The maximum number of results to return. This number should be between 1 and 50 inclusive. </summary>
        public int? MaxNumResults { get; set; }
        /// <summary> Ranking options for search. </summary>
        public RankingOptions RankingOptions { get; set; }
    }
}
