// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// A tool call to a computer use tool. See the
    /// [computer use guide](/docs/guides/tools-computer-use) for more information.
    ///
    /// </summary>
    public partial class ComputerToolCallItemParam : ItemParam
    {
        /// <summary> Initializes a new instance of <see cref="ComputerToolCallItemParam"/>. </summary>
        /// <param name="callId"> An identifier used when responding to the tool call with output. </param>
        /// <param name="action">
        /// Please note <see cref="ComputerAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerActionClick"/>, <see cref="ComputerActionDoubleClick"/>, <see cref="ComputerActionDrag"/>, <see cref="ComputerActionKeyPress"/>, <see cref="ComputerActionMove"/>, <see cref="ComputerActionScreenshot"/>, <see cref="ComputerActionScroll"/>, <see cref="ComputerActionTypeKeys"/> and <see cref="ComputerActionWait"/>.
        /// </param>
        /// <param name="pendingSafetyChecks"> The pending safety checks for the computer call. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/>, <paramref name="action"/> or <paramref name="pendingSafetyChecks"/> is null. </exception>
        public ComputerToolCallItemParam(string callId, ComputerAction action, IEnumerable<ComputerToolCallSafetyCheck> pendingSafetyChecks)
        {
            Argument.AssertNotNull(callId, nameof(callId));
            Argument.AssertNotNull(action, nameof(action));
            Argument.AssertNotNull(pendingSafetyChecks, nameof(pendingSafetyChecks));

            Type = ItemType.ComputerCall;
            CallId = callId;
            Action = action;
            PendingSafetyChecks = pendingSafetyChecks.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ComputerToolCallItemParam"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="callId"> An identifier used when responding to the tool call with output. </param>
        /// <param name="action">
        /// Please note <see cref="ComputerAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerActionClick"/>, <see cref="ComputerActionDoubleClick"/>, <see cref="ComputerActionDrag"/>, <see cref="ComputerActionKeyPress"/>, <see cref="ComputerActionMove"/>, <see cref="ComputerActionScreenshot"/>, <see cref="ComputerActionScroll"/>, <see cref="ComputerActionTypeKeys"/> and <see cref="ComputerActionWait"/>.
        /// </param>
        /// <param name="pendingSafetyChecks"> The pending safety checks for the computer call. </param>
        internal ComputerToolCallItemParam(ItemType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string callId, ComputerAction action, IList<ComputerToolCallSafetyCheck> pendingSafetyChecks) : base(type, serializedAdditionalRawData)
        {
            CallId = callId;
            Action = action;
            PendingSafetyChecks = pendingSafetyChecks;
        }

        /// <summary> Initializes a new instance of <see cref="ComputerToolCallItemParam"/> for deserialization. </summary>
        internal ComputerToolCallItemParam()
        {
        }

        /// <summary> An identifier used when responding to the tool call with output. </summary>
        public string CallId { get; set; }
        /// <summary>
        /// Gets or sets the action
        /// Please note <see cref="ComputerAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerActionClick"/>, <see cref="ComputerActionDoubleClick"/>, <see cref="ComputerActionDrag"/>, <see cref="ComputerActionKeyPress"/>, <see cref="ComputerActionMove"/>, <see cref="ComputerActionScreenshot"/>, <see cref="ComputerActionScroll"/>, <see cref="ComputerActionTypeKeys"/> and <see cref="ComputerActionWait"/>.
        /// </summary>
        public ComputerAction Action { get; set; }
        /// <summary> The pending safety checks for the computer call. </summary>
        public IList<ComputerToolCallSafetyCheck> PendingSafetyChecks { get; }
    }
}
