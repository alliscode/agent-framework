// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// A tool call to run code.
    ///
    /// </summary>
    public partial class CodeInterpreterToolCallItemParam : ItemParam
    {
        /// <summary> Initializes a new instance of <see cref="CodeInterpreterToolCallItemParam"/>. </summary>
        /// <param name="containerId"> The ID of the container used to run the code. </param>
        /// <param name="code"> The code to run, or null if not available. </param>
        /// <param name="outputs">
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="containerId"/> is null. </exception>
        public CodeInterpreterToolCallItemParam(string containerId, string code, IEnumerable<CodeInterpreterOutput> outputs)
        {
            Argument.AssertNotNull(containerId, nameof(containerId));

            Type = ItemType.CodeInterpreterCall;
            ContainerId = containerId;
            Code = code;
            Outputs = outputs?.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="CodeInterpreterToolCallItemParam"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="containerId"> The ID of the container used to run the code. </param>
        /// <param name="code"> The code to run, or null if not available. </param>
        /// <param name="outputs">
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </param>
        internal CodeInterpreterToolCallItemParam(ItemType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string containerId, string code, IList<CodeInterpreterOutput> outputs) : base(type, serializedAdditionalRawData)
        {
            ContainerId = containerId;
            Code = code;
            Outputs = outputs;
        }

        /// <summary> Initializes a new instance of <see cref="CodeInterpreterToolCallItemParam"/> for deserialization. </summary>
        internal CodeInterpreterToolCallItemParam()
        {
        }

        /// <summary> The ID of the container used to run the code. </summary>
        public string ContainerId { get; set; }
        /// <summary> The code to run, or null if not available. </summary>
        public string Code { get; set; }
        /// <summary>
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </summary>
        public IList<CodeInterpreterOutput> Outputs { get; set; }
    }
}
