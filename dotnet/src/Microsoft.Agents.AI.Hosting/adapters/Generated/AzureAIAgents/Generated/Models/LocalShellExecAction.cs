// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> Execute a shell command on the server. </summary>
    public partial class LocalShellExecAction
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LocalShellExecAction"/>. </summary>
        /// <param name="command"> The command to run. </param>
        /// <param name="env"> Environment variables to set for the command. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="command"/> or <paramref name="env"/> is null. </exception>
        public LocalShellExecAction(IEnumerable<string> command, IDictionary<string, string> env)
        {
            Argument.AssertNotNull(command, nameof(command));
            Argument.AssertNotNull(env, nameof(env));

            Command = command.ToList();
            Env = env;
        }

        /// <summary> Initializes a new instance of <see cref="LocalShellExecAction"/>. </summary>
        /// <param name="type"> The type of the local shell action. Always `exec`. </param>
        /// <param name="command"> The command to run. </param>
        /// <param name="timeoutMs"> Optional timeout in milliseconds for the command. </param>
        /// <param name="workingDirectory"> Optional working directory to run the command in. </param>
        /// <param name="env"> Environment variables to set for the command. </param>
        /// <param name="user"> Optional user to run the command as. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LocalShellExecAction(LocalShellExecActionType type, IList<string> command, int? timeoutMs, string workingDirectory, IDictionary<string, string> env, string user, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Command = command;
            TimeoutMs = timeoutMs;
            WorkingDirectory = workingDirectory;
            Env = env;
            User = user;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LocalShellExecAction"/> for deserialization. </summary>
        internal LocalShellExecAction()
        {
        }

        /// <summary> The type of the local shell action. Always `exec`. </summary>
        public LocalShellExecActionType Type { get; } = LocalShellExecActionType.Exec;

        /// <summary> The command to run. </summary>
        public IList<string> Command { get; }
        /// <summary> Optional timeout in milliseconds for the command. </summary>
        public int? TimeoutMs { get; set; }
        /// <summary> Optional working directory to run the command in. </summary>
        public string WorkingDirectory { get; set; }
        /// <summary> Environment variables to set for the command. </summary>
        public IDictionary<string, string> Env { get; }
        /// <summary> Optional user to run the command as. </summary>
        public string User { get; set; }
    }
}
