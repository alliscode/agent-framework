// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    public partial class ComputerToolCallOutputItemResource : IJsonModel<ComputerToolCallOutputItemResource>
    {
        void IJsonModel<ComputerToolCallOutputItemResource>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ComputerToolCallOutputItemResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ComputerToolCallOutputItemResource)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToSerialString());
            writer.WritePropertyName("call_id"u8);
            writer.WriteStringValue(CallId);
            if (Optional.IsCollectionDefined(AcknowledgedSafetyChecks))
            {
                writer.WritePropertyName("acknowledged_safety_checks"u8);
                writer.WriteStartArray();
                foreach (var item in AcknowledgedSafetyChecks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("output"u8);
            writer.WriteObjectValue(Output, options);
        }

        ComputerToolCallOutputItemResource IJsonModel<ComputerToolCallOutputItemResource>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ComputerToolCallOutputItemResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ComputerToolCallOutputItemResource)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeComputerToolCallOutputItemResource(document.RootElement, options);
        }

        internal static ComputerToolCallOutputItemResource DeserializeComputerToolCallOutputItemResource(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ComputerToolCallOutputItemResourceStatus status = default;
            string callId = default;
            IReadOnlyList<ComputerToolCallSafetyCheck> acknowledgedSafetyChecks = default;
            ComputerToolCallOutputItemOutput output = default;
            ItemType type = default;
            string id = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString().ToComputerToolCallOutputItemResourceStatus();
                    continue;
                }
                if (property.NameEquals("call_id"u8))
                {
                    callId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("acknowledged_safety_checks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ComputerToolCallSafetyCheck> array = new List<ComputerToolCallSafetyCheck>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ComputerToolCallSafetyCheck.DeserializeComputerToolCallSafetyCheck(item, options));
                    }
                    acknowledgedSafetyChecks = array;
                    continue;
                }
                if (property.NameEquals("output"u8))
                {
                    output = ComputerToolCallOutputItemOutput.DeserializeComputerToolCallOutputItemOutput(property.Value, options);
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ItemType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ComputerToolCallOutputItemResource(
                type,
                id,
                serializedAdditionalRawData,
                status,
                callId,
                acknowledgedSafetyChecks ?? new ChangeTrackingList<ComputerToolCallSafetyCheck>(),
                output);
        }

        BinaryData IPersistableModel<ComputerToolCallOutputItemResource>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ComputerToolCallOutputItemResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ComputerToolCallOutputItemResource)} does not support writing '{options.Format}' format.");
            }
        }

        ComputerToolCallOutputItemResource IPersistableModel<ComputerToolCallOutputItemResource>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ComputerToolCallOutputItemResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeComputerToolCallOutputItemResource(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ComputerToolCallOutputItemResource)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ComputerToolCallOutputItemResource>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static new ComputerToolCallOutputItemResource FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeComputerToolCallOutputItemResource(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal override BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
