// <auto-generated/>

#nullable disable

using System;

namespace AzureAIAgents.Models
{
    internal static partial class ResponseErrorCodeExtensions
    {
        public static string ToSerialString(this ResponseErrorCode value) => value switch
        {
            ResponseErrorCode.ServerError => "server_error",
            ResponseErrorCode.RateLimitExceeded => "rate_limit_exceeded",
            ResponseErrorCode.InvalidPrompt => "invalid_prompt",
            ResponseErrorCode.VectorStoreTimeout => "vector_store_timeout",
            ResponseErrorCode.InvalidImage => "invalid_image",
            ResponseErrorCode.InvalidImageFormat => "invalid_image_format",
            ResponseErrorCode.InvalidBase64Image => "invalid_base64_image",
            ResponseErrorCode.InvalidImageUrl => "invalid_image_url",
            ResponseErrorCode.ImageTooLarge => "image_too_large",
            ResponseErrorCode.ImageTooSmall => "image_too_small",
            ResponseErrorCode.ImageParseError => "image_parse_error",
            ResponseErrorCode.ImageContentPolicyViolation => "image_content_policy_violation",
            ResponseErrorCode.InvalidImageMode => "invalid_image_mode",
            ResponseErrorCode.ImageFileTooLarge => "image_file_too_large",
            ResponseErrorCode.UnsupportedImageMediaType => "unsupported_image_media_type",
            ResponseErrorCode.EmptyImageFile => "empty_image_file",
            ResponseErrorCode.FailedToDownloadImage => "failed_to_download_image",
            ResponseErrorCode.ImageFileNotFound => "image_file_not_found",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ResponseErrorCode value.")
        };

        public static ResponseErrorCode ToResponseErrorCode(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "server_error")) return ResponseErrorCode.ServerError;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "rate_limit_exceeded")) return ResponseErrorCode.RateLimitExceeded;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "invalid_prompt")) return ResponseErrorCode.InvalidPrompt;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "vector_store_timeout")) return ResponseErrorCode.VectorStoreTimeout;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "invalid_image")) return ResponseErrorCode.InvalidImage;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "invalid_image_format")) return ResponseErrorCode.InvalidImageFormat;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "invalid_base64_image")) return ResponseErrorCode.InvalidBase64Image;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "invalid_image_url")) return ResponseErrorCode.InvalidImageUrl;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "image_too_large")) return ResponseErrorCode.ImageTooLarge;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "image_too_small")) return ResponseErrorCode.ImageTooSmall;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "image_parse_error")) return ResponseErrorCode.ImageParseError;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "image_content_policy_violation")) return ResponseErrorCode.ImageContentPolicyViolation;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "invalid_image_mode")) return ResponseErrorCode.InvalidImageMode;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "image_file_too_large")) return ResponseErrorCode.ImageFileTooLarge;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "unsupported_image_media_type")) return ResponseErrorCode.UnsupportedImageMediaType;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "empty_image_file")) return ResponseErrorCode.EmptyImageFile;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "failed_to_download_image")) return ResponseErrorCode.FailedToDownloadImage;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "image_file_not_found")) return ResponseErrorCode.ImageFileNotFound;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ResponseErrorCode value.");
        }
    }
}
