// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary> The AnnotationType. </summary>
    internal readonly partial struct AnnotationType : IEquatable<AnnotationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnnotationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnnotationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FileCitationValue = "file_citation";
        private const string UrlCitationValue = "url_citation";
        private const string FilePathValue = "file_path";
        private const string ContainerFileCitationValue = "container_file_citation";

        /// <summary> file_citation. </summary>
        public static AnnotationType FileCitation { get; } = new AnnotationType(FileCitationValue);
        /// <summary> url_citation. </summary>
        public static AnnotationType UrlCitation { get; } = new AnnotationType(UrlCitationValue);
        /// <summary> file_path. </summary>
        public static AnnotationType FilePath { get; } = new AnnotationType(FilePathValue);
        /// <summary> container_file_citation. </summary>
        public static AnnotationType ContainerFileCitation { get; } = new AnnotationType(ContainerFileCitationValue);
        /// <summary> Determines if two <see cref="AnnotationType"/> values are the same. </summary>
        public static bool operator ==(AnnotationType left, AnnotationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnnotationType"/> values are not the same. </summary>
        public static bool operator !=(AnnotationType left, AnnotationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AnnotationType"/>. </summary>
        public static implicit operator AnnotationType(string value) => new AnnotationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnnotationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnnotationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
