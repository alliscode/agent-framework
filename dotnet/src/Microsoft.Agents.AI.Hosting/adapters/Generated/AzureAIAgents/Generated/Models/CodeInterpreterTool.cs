// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> A tool that runs Python code to help generate a response to a prompt. </summary>
    public partial class CodeInterpreterTool : Tool
    {
        /// <summary> Initializes a new instance of <see cref="CodeInterpreterTool"/>. </summary>
        /// <param name="container">
        /// The code interpreter container. Can be a container ID or an object that
        /// specifies uploaded file IDs to make available to your code.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="container"/> is null. </exception>
        public CodeInterpreterTool(BinaryData container)
        {
            Argument.AssertNotNull(container, nameof(container));

            Type = ToolType.CodeInterpreter;
            Container = container;
        }

        /// <summary> Initializes a new instance of <see cref="CodeInterpreterTool"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="container">
        /// The code interpreter container. Can be a container ID or an object that
        /// specifies uploaded file IDs to make available to your code.
        /// </param>
        internal CodeInterpreterTool(ToolType type, IDictionary<string, BinaryData> serializedAdditionalRawData, BinaryData container) : base(type, serializedAdditionalRawData)
        {
            Container = container;
        }

        /// <summary> Initializes a new instance of <see cref="CodeInterpreterTool"/> for deserialization. </summary>
        internal CodeInterpreterTool()
        {
        }

        /// <summary>
        /// The code interpreter container. Can be a container ID or an object that
        /// specifies uploaded file IDs to make available to your code.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="CodeInterpreterToolAuto"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Container { get; set; }
    }
}
