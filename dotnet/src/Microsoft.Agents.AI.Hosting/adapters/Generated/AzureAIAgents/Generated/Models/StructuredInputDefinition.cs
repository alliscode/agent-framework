// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> An structured input that can participate in prompt template substitutions and tool argument binding. </summary>
    public partial class StructuredInputDefinition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StructuredInputDefinition"/>. </summary>
        public StructuredInputDefinition()
        {
            ToolArgumentBindings = new ChangeTrackingList<ToolArgumentBinding>();
        }

        /// <summary> Initializes a new instance of <see cref="StructuredInputDefinition"/>. </summary>
        /// <param name="description"> A human-readable description of the input. </param>
        /// <param name="defaultValue"> The default value for the input if no run-time value is provided. </param>
        /// <param name="toolArgumentBindings"> When provided, the input value is binded to the specified tool arguments. </param>
        /// <param name="schema"> The JSON schema for the structured input (optional). </param>
        /// <param name="required"> Whether the input property is required when the agent is invoked. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StructuredInputDefinition(string description, BinaryData defaultValue, IList<ToolArgumentBinding> toolArgumentBindings, BinaryData schema, bool? required, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            DefaultValue = defaultValue;
            ToolArgumentBindings = toolArgumentBindings;
            Schema = schema;
            Required = required;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> A human-readable description of the input. </summary>
        public string Description { get; set; }
        /// <summary>
        /// The default value for the input if no run-time value is provided.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData DefaultValue { get; set; }
        /// <summary> When provided, the input value is binded to the specified tool arguments. </summary>
        public IList<ToolArgumentBinding> ToolArgumentBindings { get; }
        /// <summary>
        /// The JSON schema for the structured input (optional).
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Schema { get; set; }
        /// <summary> Whether the input property is required when the agent is invoked. </summary>
        public bool? Required { get; set; }
    }
}
