// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace AzureAIAgents.Models
{
    [PersistableModelProxy(typeof(UnknownItemResource))]
    public partial class ItemResource : IJsonModel<ItemResource>
    {
        void IJsonModel<ItemResource>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemResource)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ItemResource IJsonModel<ItemResource>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemResource)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeItemResource(document.RootElement, options);
        }

        internal static ItemResource DeserializeItemResource(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "assistant": return ResponsesAssistantMessageItemResource.DeserializeResponsesAssistantMessageItemResource(element, options);
                    case "code_interpreter_call": return CodeInterpreterToolCallItemResource.DeserializeCodeInterpreterToolCallItemResource(element, options);
                    case "computer_call": return ComputerToolCallItemResource.DeserializeComputerToolCallItemResource(element, options);
                    case "computer_call_output": return ComputerToolCallOutputItemResource.DeserializeComputerToolCallOutputItemResource(element, options);
                    case "developer": return ResponsesDeveloperMessageItemResource.DeserializeResponsesDeveloperMessageItemResource(element, options);
                    case "file_search_call": return FileSearchToolCallItemResource.DeserializeFileSearchToolCallItemResource(element, options);
                    case "function_call": return FunctionToolCallItemResource.DeserializeFunctionToolCallItemResource(element, options);
                    case "function_call_output": return FunctionToolCallOutputItemResource.DeserializeFunctionToolCallOutputItemResource(element, options);
                    case "image_generation_call": return ImageGenToolCallItemResource.DeserializeImageGenToolCallItemResource(element, options);
                    case "InvokeAzureAgent": return InvokeAzureAgentWorkflowActionOutputItemResource.DeserializeInvokeAzureAgentWorkflowActionOutputItemResource(element, options);
                    case "local_shell_call": return LocalShellToolCallItemResource.DeserializeLocalShellToolCallItemResource(element, options);
                    case "local_shell_call_output": return LocalShellToolCallOutputItemResource.DeserializeLocalShellToolCallOutputItemResource(element, options);
                    case "mcp_approval_request": return MCPApprovalRequestItemResource.DeserializeMCPApprovalRequestItemResource(element, options);
                    case "mcp_approval_response": return MCPApprovalResponseItemResource.DeserializeMCPApprovalResponseItemResource(element, options);
                    case "mcp_call": return MCPCallItemResource.DeserializeMCPCallItemResource(element, options);
                    case "mcp_list_tools": return MCPListToolsItemResource.DeserializeMCPListToolsItemResource(element, options);
                    case "message": return ResponsesMessageItemResource.DeserializeResponsesMessageItemResource(element, options);
                    case "reasoning": return ReasoningItemResource.DeserializeReasoningItemResource(element, options);
                    case "semantic_event": return SemanticEventsOutputItemResource.DeserializeSemanticEventsOutputItemResource(element, options);
                    case "structured_inputs": return StructuredInputsItemResource.DeserializeStructuredInputsItemResource(element, options);
                    case "structured_outputs": return StructuredOutputsItemResource.DeserializeStructuredOutputsItemResource(element, options);
                    case "system": return ResponsesSystemMessageItemResource.DeserializeResponsesSystemMessageItemResource(element, options);
                    case "user": return ResponsesUserMessageItemResource.DeserializeResponsesUserMessageItemResource(element, options);
                    case "web_search_call": return WebSearchToolCallItemResource.DeserializeWebSearchToolCallItemResource(element, options);
                    case "workflow_action": return WorkflowActionOutputItemResource.DeserializeWorkflowActionOutputItemResource(element, options);
                }
            }
            return UnknownItemResource.DeserializeUnknownItemResource(element, options);
        }

        BinaryData IPersistableModel<ItemResource>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIAgentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ItemResource)} does not support writing '{options.Format}' format.");
            }
        }

        ItemResource IPersistableModel<ItemResource>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeItemResource(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ItemResource)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ItemResource>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static ItemResource FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeItemResource(document.RootElement);
        }

        /// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
        internal virtual BinaryContent ToBinaryContent()
        {
            return BinaryContent.Create(this, ModelSerializationExtensions.WireOptions);
        }
    }
}
