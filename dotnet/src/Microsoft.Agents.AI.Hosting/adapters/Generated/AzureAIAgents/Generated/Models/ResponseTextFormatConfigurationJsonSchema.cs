// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// JSON Schema response format. Used to generate structured JSON responses.
    /// Learn more about [Structured Outputs](/docs/guides/structured-outputs).
    /// </summary>
    public partial class ResponseTextFormatConfigurationJsonSchema : ResponseTextFormatConfiguration
    {
        /// <summary> Initializes a new instance of <see cref="ResponseTextFormatConfigurationJsonSchema"/>. </summary>
        /// <param name="name">
        /// The name of the response format. Must be a-z, A-Z, 0-9, or contain
        /// underscores and dashes, with a maximum length of 64.
        /// </param>
        /// <param name="schema"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="schema"/> is null. </exception>
        public ResponseTextFormatConfigurationJsonSchema(string name, ResponseFormatJsonSchemaSchema schema)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(schema, nameof(schema));

            Type = ResponseTextFormatConfigurationType.JsonSchema;
            Name = name;
            Schema = schema;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseTextFormatConfigurationJsonSchema"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="description">
        /// A description of what the response format is for, used by the model to
        /// determine how to respond in the format.
        /// </param>
        /// <param name="name">
        /// The name of the response format. Must be a-z, A-Z, 0-9, or contain
        /// underscores and dashes, with a maximum length of 64.
        /// </param>
        /// <param name="schema"></param>
        /// <param name="strict">
        /// Whether to enable strict schema adherence when generating the output.
        /// If set to true, the model will always follow the exact schema defined
        /// in the `schema` field. Only a subset of JSON Schema is supported when
        /// `strict` is `true`. To learn more, read the [Structured Outputs
        /// guide](/docs/guides/structured-outputs).
        /// </param>
        internal ResponseTextFormatConfigurationJsonSchema(ResponseTextFormatConfigurationType type, IDictionary<string, BinaryData> serializedAdditionalRawData, string description, string name, ResponseFormatJsonSchemaSchema schema, bool? strict) : base(type, serializedAdditionalRawData)
        {
            Description = description;
            Name = name;
            Schema = schema;
            Strict = strict;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseTextFormatConfigurationJsonSchema"/> for deserialization. </summary>
        internal ResponseTextFormatConfigurationJsonSchema()
        {
        }

        /// <summary>
        /// A description of what the response format is for, used by the model to
        /// determine how to respond in the format.
        /// </summary>
        public string Description { get; set; }
        /// <summary>
        /// The name of the response format. Must be a-z, A-Z, 0-9, or contain
        /// underscores and dashes, with a maximum length of 64.
        /// </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the schema. </summary>
        public ResponseFormatJsonSchemaSchema Schema { get; set; }
        /// <summary>
        /// Whether to enable strict schema adherence when generating the output.
        /// If set to true, the model will always follow the exact schema defined
        /// in the `schema` field. Only a subset of JSON Schema is supported when
        /// `strict` is `true`. To learn more, read the [Structured Outputs
        /// guide](/docs/guides/structured-outputs).
        /// </summary>
        public bool? Strict { get; set; }
    }
}
