// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> A drag action. </summary>
    public partial class ComputerActionDrag : ComputerAction
    {
        /// <summary> Initializes a new instance of <see cref="ComputerActionDrag"/>. </summary>
        /// <param name="path">
        /// An array of coordinates representing the path of the drag action. Coordinates will appear as an array
        /// of objects, eg
        /// ```
        /// [
        ///   { x: 100, y: 200 },
        ///   { x: 200, y: 300 }
        /// ]
        /// ```
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="path"/> is null. </exception>
        public ComputerActionDrag(IEnumerable<Coordinate> path)
        {
            Argument.AssertNotNull(path, nameof(path));

            Type = ComputerActionType.Drag;
            Path = path.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ComputerActionDrag"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="path">
        /// An array of coordinates representing the path of the drag action. Coordinates will appear as an array
        /// of objects, eg
        /// ```
        /// [
        ///   { x: 100, y: 200 },
        ///   { x: 200, y: 300 }
        /// ]
        /// ```
        /// </param>
        internal ComputerActionDrag(ComputerActionType type, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<Coordinate> path) : base(type, serializedAdditionalRawData)
        {
            Path = path;
        }

        /// <summary> Initializes a new instance of <see cref="ComputerActionDrag"/> for deserialization. </summary>
        internal ComputerActionDrag()
        {
        }

        /// <summary>
        /// An array of coordinates representing the path of the drag action. Coordinates will appear as an array
        /// of objects, eg
        /// ```
        /// [
        ///   { x: 100, y: 200 },
        ///   { x: 200, y: 300 }
        /// ]
        /// ```
        /// </summary>
        public IList<Coordinate> Path { get; }
    }
}
