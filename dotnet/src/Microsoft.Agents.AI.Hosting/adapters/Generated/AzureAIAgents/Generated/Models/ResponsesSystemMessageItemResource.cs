// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> A message resource item with the `system` role. </summary>
    public partial class ResponsesSystemMessageItemResource : ResponsesMessageItemResource
    {
        /// <summary> Initializes a new instance of <see cref="ResponsesSystemMessageItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="content">
        /// The content associated with the message.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="content"/> is null. </exception>
        internal ResponsesSystemMessageItemResource(string id, ResponsesMessageItemResourceStatus status, IEnumerable<ItemContent> content) : base(id, status)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(content, nameof(content));

            Role = ResponsesMessageRole.System;
            Content = content.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ResponsesSystemMessageItemResource"/>. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="role"> The role associated with the message. </param>
        /// <param name="content">
        /// The content associated with the message.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </param>
        internal ResponsesSystemMessageItemResource(ItemType type, string id, IDictionary<string, BinaryData> serializedAdditionalRawData, ResponsesMessageItemResourceStatus status, ResponsesMessageRole role, IReadOnlyList<ItemContent> content) : base(type, id, serializedAdditionalRawData, status, role)
        {
            Content = content;
        }

        /// <summary> Initializes a new instance of <see cref="ResponsesSystemMessageItemResource"/> for deserialization. </summary>
        internal ResponsesSystemMessageItemResource()
        {
        }

        /// <summary>
        /// The content associated with the message.
        /// Please note <see cref="ItemContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ItemContentInputAudio"/>, <see cref="ItemContentInputFile"/>, <see cref="ItemContentInputImage"/>, <see cref="ItemContentInputText"/>, <see cref="ItemContentOutputAudio"/>, <see cref="ItemContentOutputText"/> and <see cref="ItemContentRefusal"/>.
        /// </summary>
        public IReadOnlyList<ItemContent> Content { get; }
    }
}
