// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary> The Response. </summary>
    public partial class Response
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Response"/>. </summary>
        /// <param name="agent"> The agent used for this response. </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard.
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        /// </param>
        /// <param name="temperature">
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </param>
        /// <param name="topP">
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </param>
        /// <param name="user"> A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). </param>
        /// <param name="id"> Unique identifier for this Response. </param>
        /// <param name="createdAt"> Unix timestamp (in seconds) of when this Response was created. </param>
        /// <param name="error"></param>
        /// <param name="incompleteDetails"> Details about why the response is incomplete. </param>
        /// <param name="output">
        /// An array of content items generated by the model.
        ///
        /// - The length and order of items in the `output` array is dependent
        ///   on the model's response.
        /// - Rather than accessing the first item in the `output` array and
        ///   assuming it's an `assistant` message with the content generated by
        ///   the model, you might consider using the `output_text` property where
        ///   supported in SDKs.
        /// Please note <see cref="ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="CodeInterpreterToolCallItemResource"/>, <see cref="ComputerToolCallItemResource"/>, <see cref="ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="FileSearchToolCallItemResource"/>, <see cref="FunctionToolCallItemResource"/>, <see cref="FunctionToolCallOutputItemResource"/>, <see cref="ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="LocalShellToolCallItemResource"/>, <see cref="LocalShellToolCallOutputItemResource"/>, <see cref="MCPApprovalRequestItemResource"/>, <see cref="MCPApprovalResponseItemResource"/>, <see cref="MCPCallItemResource"/>, <see cref="MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="ReasoningItemResource"/>, <see cref="SemanticEventsOutputItemResource"/>, <see cref="StructuredInputsItemResource"/>, <see cref="StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <param name="instructions">
        /// A system (or developer) message inserted into the model's context.
        ///
        /// When using along with `previous_response_id`, the instructions from a previous
        /// response will not be carried over to the next response. This makes it simple
        /// to swap out system (or developer) messages in new responses.
        /// </param>
        /// <param name="parallelToolCalls"> Whether to allow the model to run tool calls in parallel. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agent"/>, <paramref name="id"/> or <paramref name="output"/> is null. </exception>
        internal Response(AgentId agent, IReadOnlyDictionary<string, string> metadata, float? temperature, float? topP, string user, string id, DateTimeOffset createdAt, ResponseError error, ResponseIncompleteDetails1 incompleteDetails, IEnumerable<ItemResource> output, BinaryData instructions, bool parallelToolCalls)
        {
            Argument.AssertNotNull(agent, nameof(agent));
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(output, nameof(output));

            Agent = agent;
            Metadata = metadata;
            Temperature = temperature;
            TopP = topP;
            User = user;
            Tools = new ChangeTrackingList<Tool>();
            Id = id;
            CreatedAt = createdAt;
            Error = error;
            IncompleteDetails = incompleteDetails;
            Output = output.ToList();
            Instructions = instructions;
            ParallelToolCalls = parallelToolCalls;
        }

        /// <summary> Initializes a new instance of <see cref="Response"/>. </summary>
        /// <param name="agent"> The agent used for this response. </param>
        /// <param name="conversationId"> The id of the conversation used for this response. </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard.
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        /// </param>
        /// <param name="temperature">
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </param>
        /// <param name="topP">
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </param>
        /// <param name="user"> A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). </param>
        /// <param name="serviceTier"></param>
        /// <param name="topLogprobs"> An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. </param>
        /// <param name="previousResponseId">
        /// The unique ID of the previous response to the model. Use this to
        /// create multi-turn conversations. Learn more about
        /// [conversation state](/docs/guides/conversation-state).
        /// </param>
        /// <param name="model">
        /// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
        /// offers a wide range of models with different capabilities, performance
        /// characteristics, and price points. Refer to the [model guide](/docs/models)
        /// to browse and compare available models.
        /// </param>
        /// <param name="reasoning"></param>
        /// <param name="background">
        /// Whether to run the model response in the background.
        /// [Learn more](/docs/guides/background).
        /// </param>
        /// <param name="maxOutputTokens"> An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). </param>
        /// <param name="maxToolCalls"> The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. </param>
        /// <param name="text">
        /// Configuration options for a text response from the model. Can be plain
        /// text or structured JSON data. Learn more:
        /// - [Text inputs and outputs](/docs/guides/text)
        /// - [Structured Outputs](/docs/guides/structured-outputs)
        /// </param>
        /// <param name="tools">
        /// An array of tools the model may call while generating a response. You
        /// can specify which tool to use by setting the `tool_choice` parameter.
        ///
        /// The two categories of tools you can provide the model are:
        ///
        /// - **Built-in tools**: Tools that are provided by OpenAI that extend the
        ///   model's capabilities, like [web search](/docs/guides/tools-web-search)
        ///   or [file search](/docs/guides/tools-file-search). Learn more about
        ///   [built-in tools](/docs/guides/tools).
        /// - **Function calls (custom tools)**: Functions that are defined by you,
        ///   enabling the model to call your own code. Learn more about
        ///   [function calling](/docs/guides/function-calling).
        /// Please note <see cref="Tool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CaptureSemanticEventsTool"/>, <see cref="CaptureStructuredOutputsTool"/>, <see cref="CodeInterpreterTool"/>, <see cref="ComputerUsePreviewTool"/>, <see cref="FileSearchTool"/>, <see cref="FunctionTool"/>, <see cref="ImageGenTool"/>, <see cref="LocalShellTool"/>, <see cref="MCPTool"/> and <see cref="WebSearchPreviewTool"/>.
        /// </param>
        /// <param name="toolChoice">
        /// How the model should select which tool (or tools) to use when generating
        /// a response. See the `tools` parameter to see how to specify which tools
        /// the model can call.
        /// </param>
        /// <param name="prompt"></param>
        /// <param name="truncation">
        /// The truncation strategy to use for the model response.
        /// - `auto`: If the context of this response and previous ones exceeds
        ///   the model's context window size, the model will truncate the
        ///   response to fit the context window by dropping input items in the
        ///   middle of the conversation.
        /// - `disabled` (default): If a model response will exceed the context window
        ///   size for a model, the request will fail with a 400 error.
        /// </param>
        /// <param name="id"> Unique identifier for this Response. </param>
        /// <param name="object"> The object type of this resource - always set to `response`. </param>
        /// <param name="status">
        /// The status of the response generation. One of `completed`, `failed`,
        /// `in_progress`, `cancelled`, `queued`, or `incomplete`.
        /// </param>
        /// <param name="createdAt"> Unix timestamp (in seconds) of when this Response was created. </param>
        /// <param name="error"></param>
        /// <param name="incompleteDetails"> Details about why the response is incomplete. </param>
        /// <param name="output">
        /// An array of content items generated by the model.
        ///
        /// - The length and order of items in the `output` array is dependent
        ///   on the model's response.
        /// - Rather than accessing the first item in the `output` array and
        ///   assuming it's an `assistant` message with the content generated by
        ///   the model, you might consider using the `output_text` property where
        ///   supported in SDKs.
        /// Please note <see cref="ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="CodeInterpreterToolCallItemResource"/>, <see cref="ComputerToolCallItemResource"/>, <see cref="ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="FileSearchToolCallItemResource"/>, <see cref="FunctionToolCallItemResource"/>, <see cref="FunctionToolCallOutputItemResource"/>, <see cref="ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="LocalShellToolCallItemResource"/>, <see cref="LocalShellToolCallOutputItemResource"/>, <see cref="MCPApprovalRequestItemResource"/>, <see cref="MCPApprovalResponseItemResource"/>, <see cref="MCPCallItemResource"/>, <see cref="MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="ReasoningItemResource"/>, <see cref="SemanticEventsOutputItemResource"/>, <see cref="StructuredInputsItemResource"/>, <see cref="StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </param>
        /// <param name="instructions">
        /// A system (or developer) message inserted into the model's context.
        ///
        /// When using along with `previous_response_id`, the instructions from a previous
        /// response will not be carried over to the next response. This makes it simple
        /// to swap out system (or developer) messages in new responses.
        /// </param>
        /// <param name="outputText">
        /// SDK-only convenience property that contains the aggregated text output
        /// from all `output_text` items in the `output` array, if any are present.
        /// Supported in the Python and JavaScript SDKs.
        /// </param>
        /// <param name="usage"></param>
        /// <param name="parallelToolCalls"> Whether to allow the model to run tool calls in parallel. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Response(AgentId agent, string conversationId, IReadOnlyDictionary<string, string> metadata, float? temperature, float? topP, string user, ServiceTier? serviceTier, int? topLogprobs, string previousResponseId, ModelIdsResponses? model, Reasoning reasoning, bool? background, int? maxOutputTokens, int? maxToolCalls, CreateResponseText text, IReadOnlyList<Tool> tools, BinaryData toolChoice, Prompt prompt, CreateResponseTruncation? truncation, string id, ResponseObject @object, ResponseStatus? status, DateTimeOffset createdAt, ResponseError error, ResponseIncompleteDetails1 incompleteDetails, IReadOnlyList<ItemResource> output, BinaryData instructions, string outputText, ResponseUsage usage, bool parallelToolCalls, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Agent = agent;
            ConversationId = conversationId;
            Metadata = metadata;
            Temperature = temperature;
            TopP = topP;
            User = user;
            ServiceTier = serviceTier;
            TopLogprobs = topLogprobs;
            PreviousResponseId = previousResponseId;
            Model = model;
            Reasoning = reasoning;
            Background = background;
            MaxOutputTokens = maxOutputTokens;
            MaxToolCalls = maxToolCalls;
            Text = text;
            Tools = tools;
            ToolChoice = toolChoice;
            Prompt = prompt;
            Truncation = truncation;
            Id = id;
            Object = @object;
            Status = status;
            CreatedAt = createdAt;
            Error = error;
            IncompleteDetails = incompleteDetails;
            Output = output;
            Instructions = instructions;
            OutputText = outputText;
            Usage = usage;
            ParallelToolCalls = parallelToolCalls;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Response"/> for deserialization. </summary>
        internal Response()
        {
        }

        /// <summary> The agent used for this response. </summary>
        public AgentId Agent { get; }
        /// <summary> The id of the conversation used for this response. </summary>
        public string ConversationId { get; }
        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard.
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        /// </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </summary>
        public float? Temperature { get; }
        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </summary>
        public float? TopP { get; }
        /// <summary> A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). </summary>
        public string User { get; }
        /// <summary> Gets the service tier. </summary>
        public ServiceTier? ServiceTier { get; }
        /// <summary> An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. </summary>
        public int? TopLogprobs { get; }
        /// <summary>
        /// The unique ID of the previous response to the model. Use this to
        /// create multi-turn conversations. Learn more about
        /// [conversation state](/docs/guides/conversation-state).
        /// </summary>
        public string PreviousResponseId { get; }
        /// <summary>
        /// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
        /// offers a wide range of models with different capabilities, performance
        /// characteristics, and price points. Refer to the [model guide](/docs/models)
        /// to browse and compare available models.
        /// </summary>
        public ModelIdsResponses? Model { get; }
        /// <summary> Gets the reasoning. </summary>
        public Reasoning Reasoning { get; }
        /// <summary>
        /// Whether to run the model response in the background.
        /// [Learn more](/docs/guides/background).
        /// </summary>
        public bool? Background { get; }
        /// <summary> An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). </summary>
        public int? MaxOutputTokens { get; }
        /// <summary> The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. </summary>
        public int? MaxToolCalls { get; }
        /// <summary>
        /// Configuration options for a text response from the model. Can be plain
        /// text or structured JSON data. Learn more:
        /// - [Text inputs and outputs](/docs/guides/text)
        /// - [Structured Outputs](/docs/guides/structured-outputs)
        /// </summary>
        public CreateResponseText Text { get; }
        /// <summary>
        /// An array of tools the model may call while generating a response. You
        /// can specify which tool to use by setting the `tool_choice` parameter.
        ///
        /// The two categories of tools you can provide the model are:
        ///
        /// - **Built-in tools**: Tools that are provided by OpenAI that extend the
        ///   model's capabilities, like [web search](/docs/guides/tools-web-search)
        ///   or [file search](/docs/guides/tools-file-search). Learn more about
        ///   [built-in tools](/docs/guides/tools).
        /// - **Function calls (custom tools)**: Functions that are defined by you,
        ///   enabling the model to call your own code. Learn more about
        ///   [function calling](/docs/guides/function-calling).
        /// Please note <see cref="Tool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CaptureSemanticEventsTool"/>, <see cref="CaptureStructuredOutputsTool"/>, <see cref="CodeInterpreterTool"/>, <see cref="ComputerUsePreviewTool"/>, <see cref="FileSearchTool"/>, <see cref="FunctionTool"/>, <see cref="ImageGenTool"/>, <see cref="LocalShellTool"/>, <see cref="MCPTool"/> and <see cref="WebSearchPreviewTool"/>.
        /// </summary>
        public IReadOnlyList<Tool> Tools { get; }
        /// <summary>
        /// How the model should select which tool (or tools) to use when generating
        /// a response. See the `tools` parameter to see how to specify which tools
        /// the model can call.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="ToolChoiceOptions"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="ToolChoiceObject"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ToolChoice { get; }
        /// <summary> Gets the prompt. </summary>
        public Prompt Prompt { get; }
        /// <summary>
        /// The truncation strategy to use for the model response.
        /// - `auto`: If the context of this response and previous ones exceeds
        ///   the model's context window size, the model will truncate the
        ///   response to fit the context window by dropping input items in the
        ///   middle of the conversation.
        /// - `disabled` (default): If a model response will exceed the context window
        ///   size for a model, the request will fail with a 400 error.
        /// </summary>
        public CreateResponseTruncation? Truncation { get; }
        /// <summary> Unique identifier for this Response. </summary>
        public string Id { get; }
        /// <summary> The object type of this resource - always set to `response`. </summary>
        public ResponseObject Object { get; } = ResponseObject.Response;

        /// <summary>
        /// The status of the response generation. One of `completed`, `failed`,
        /// `in_progress`, `cancelled`, `queued`, or `incomplete`.
        /// </summary>
        public ResponseStatus? Status { get; }
        /// <summary> Unix timestamp (in seconds) of when this Response was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> Gets the error. </summary>
        public ResponseError Error { get; }
        /// <summary> Details about why the response is incomplete. </summary>
        public ResponseIncompleteDetails1 IncompleteDetails { get; }
        /// <summary>
        /// An array of content items generated by the model.
        ///
        /// - The length and order of items in the `output` array is dependent
        ///   on the model's response.
        /// - Rather than accessing the first item in the `output` array and
        ///   assuming it's an `assistant` message with the content generated by
        ///   the model, you might consider using the `output_text` property where
        ///   supported in SDKs.
        /// Please note <see cref="ItemResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResponsesAssistantMessageItemResource"/>, <see cref="CodeInterpreterToolCallItemResource"/>, <see cref="ComputerToolCallItemResource"/>, <see cref="ComputerToolCallOutputItemResource"/>, <see cref="ResponsesDeveloperMessageItemResource"/>, <see cref="FileSearchToolCallItemResource"/>, <see cref="FunctionToolCallItemResource"/>, <see cref="FunctionToolCallOutputItemResource"/>, <see cref="ImageGenToolCallItemResource"/>, <see cref="InvokeAzureAgentWorkflowActionOutputItemResource"/>, <see cref="LocalShellToolCallItemResource"/>, <see cref="LocalShellToolCallOutputItemResource"/>, <see cref="MCPApprovalRequestItemResource"/>, <see cref="MCPApprovalResponseItemResource"/>, <see cref="MCPCallItemResource"/>, <see cref="MCPListToolsItemResource"/>, <see cref="ResponsesMessageItemResource"/>, <see cref="ReasoningItemResource"/>, <see cref="SemanticEventsOutputItemResource"/>, <see cref="StructuredInputsItemResource"/>, <see cref="StructuredOutputsItemResource"/>, <see cref="ResponsesSystemMessageItemResource"/>, <see cref="ResponsesUserMessageItemResource"/>, <see cref="WebSearchToolCallItemResource"/> and <see cref="WorkflowActionOutputItemResource"/>.
        /// </summary>
        public IReadOnlyList<ItemResource> Output { get; }
        /// <summary>
        /// A system (or developer) message inserted into the model's context.
        ///
        /// When using along with `previous_response_id`, the instructions from a previous
        /// response will not be carried over to the next response. This makes it simple
        /// to swap out system (or developer) messages in new responses.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="IList{T}"/> where <c>T</c> is of type <see cref="ItemParam"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Instructions { get; }
        /// <summary>
        /// SDK-only convenience property that contains the aggregated text output
        /// from all `output_text` items in the `output` array, if any are present.
        /// Supported in the Python and JavaScript SDKs.
        /// </summary>
        public string OutputText { get; }
        /// <summary> Gets the usage. </summary>
        public ResponseUsage Usage { get; }
        /// <summary> Whether to allow the model to run tool calls in parallel. </summary>
        public bool ParallelToolCalls { get; }
    }
}
