// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureAIAgents.Models
{
    /// <summary>
    /// A tool call to run code.
    ///
    /// </summary>
    public partial class CodeInterpreterToolCallItemResource : ItemResource
    {
        /// <summary> Initializes a new instance of <see cref="CodeInterpreterToolCallItemResource"/>. </summary>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <param name="containerId"> The ID of the container used to run the code. </param>
        /// <param name="code"> The code to run, or null if not available. </param>
        /// <param name="outputs">
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="containerId"/> is null. </exception>
        internal CodeInterpreterToolCallItemResource(string id, CodeInterpreterToolCallItemResourceStatus status, string containerId, string code, IEnumerable<CodeInterpreterOutput> outputs) : base(id)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(containerId, nameof(containerId));

            Type = ItemType.CodeInterpreterCall;
            Status = status;
            ContainerId = containerId;
            Code = code;
            Outputs = outputs?.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="CodeInterpreterToolCallItemResource"/>. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="status"></param>
        /// <param name="containerId"> The ID of the container used to run the code. </param>
        /// <param name="code"> The code to run, or null if not available. </param>
        /// <param name="outputs">
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </param>
        internal CodeInterpreterToolCallItemResource(ItemType type, string id, IDictionary<string, BinaryData> serializedAdditionalRawData, CodeInterpreterToolCallItemResourceStatus status, string containerId, string code, IReadOnlyList<CodeInterpreterOutput> outputs) : base(type, id, serializedAdditionalRawData)
        {
            Status = status;
            ContainerId = containerId;
            Code = code;
            Outputs = outputs;
        }

        /// <summary> Initializes a new instance of <see cref="CodeInterpreterToolCallItemResource"/> for deserialization. </summary>
        internal CodeInterpreterToolCallItemResource()
        {
        }

        /// <summary> Gets the status. </summary>
        public CodeInterpreterToolCallItemResourceStatus Status { get; }
        /// <summary> The ID of the container used to run the code. </summary>
        public string ContainerId { get; }
        /// <summary> The code to run, or null if not available. </summary>
        public string Code { get; }
        /// <summary>
        /// The outputs generated by the code interpreter, such as logs or images.
        /// Can be null if no outputs are available.
        /// Please note <see cref="CodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterOutputImage"/> and <see cref="CodeInterpreterOutputLogs"/>.
        /// </summary>
        public IReadOnlyList<CodeInterpreterOutput> Outputs { get; }
    }
}
