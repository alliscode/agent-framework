// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureAIAgents.Models
{
    /// <summary> The ImageGenToolModel. </summary>
    public readonly partial struct ImageGenToolModel : IEquatable<ImageGenToolModel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageGenToolModel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageGenToolModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GptImage1Value = "gpt-image-1";

        /// <summary> gpt-image-1. </summary>
        public static ImageGenToolModel GptImage1 { get; } = new ImageGenToolModel(GptImage1Value);
        /// <summary> Determines if two <see cref="ImageGenToolModel"/> values are the same. </summary>
        public static bool operator ==(ImageGenToolModel left, ImageGenToolModel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageGenToolModel"/> values are not the same. </summary>
        public static bool operator !=(ImageGenToolModel left, ImageGenToolModel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImageGenToolModel"/>. </summary>
        public static implicit operator ImageGenToolModel(string value) => new ImageGenToolModel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageGenToolModel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageGenToolModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
