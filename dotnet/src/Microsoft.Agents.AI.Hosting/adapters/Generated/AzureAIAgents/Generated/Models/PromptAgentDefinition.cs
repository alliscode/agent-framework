// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AzureAIAgents.Models
{
    /// <summary> The prompt agent definition. </summary>
    public partial class PromptAgentDefinition : AgentDefinition
    {
        /// <summary> Initializes a new instance of <see cref="PromptAgentDefinition"/>. </summary>
        public PromptAgentDefinition()
        {
            Kind = AgentKind.PromptAgent;
            Tools = new ChangeTrackingList<Tool>();
            StructuredInputs = new ChangeTrackingDictionary<string, StructuredInputDefinition>();
        }

        /// <summary> Initializes a new instance of <see cref="PromptAgentDefinition"/>. </summary>
        /// <param name="kind"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="model">
        /// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
        /// offers a wide range of models with different capabilities, performance
        /// characteristics, and price points. Refer to the [model guide](/docs/models)
        /// to browse and compare available models.
        /// </param>
        /// <param name="instructions"> A system (or developer) message inserted into the model's context. </param>
        /// <param name="temperature">
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </param>
        /// <param name="topP">
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </param>
        /// <param name="reasoning"></param>
        /// <param name="tools">
        /// An array of tools the model may call while generating a response. You
        /// can specify which tool to use by setting the `tool_choice` parameter.
        /// Please note <see cref="Tool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CaptureSemanticEventsTool"/>, <see cref="CaptureStructuredOutputsTool"/>, <see cref="CodeInterpreterTool"/>, <see cref="ComputerUsePreviewTool"/>, <see cref="FileSearchTool"/>, <see cref="FunctionTool"/>, <see cref="ImageGenTool"/>, <see cref="LocalShellTool"/>, <see cref="MCPTool"/> and <see cref="WebSearchPreviewTool"/>.
        /// </param>
        /// <param name="text"> Configuration options for a text response from the model. Can be plain text or structured JSON data. </param>
        /// <param name="structuredInputs"> Set of structured inputs that can participate in prompt template substitution or tool argument bindings. </param>
        internal PromptAgentDefinition(AgentKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, ModelIdsResponses? model, string instructions, float? temperature, float? topP, Reasoning reasoning, IList<Tool> tools, PromptAgentDefinitionText text, IDictionary<string, StructuredInputDefinition> structuredInputs) : base(kind, serializedAdditionalRawData)
        {
            Model = model;
            Instructions = instructions;
            Temperature = temperature;
            TopP = topP;
            Reasoning = reasoning;
            Tools = tools;
            Text = text;
            StructuredInputs = structuredInputs;
        }

        /// <summary>
        /// Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
        /// offers a wide range of models with different capabilities, performance
        /// characteristics, and price points. Refer to the [model guide](/docs/models)
        /// to browse and compare available models.
        /// </summary>
        public ModelIdsResponses? Model { get; set; }
        /// <summary> A system (or developer) message inserted into the model's context. </summary>
        public string Instructions { get; set; }
        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// We generally recommend altering this or `top_p` but not both.
        /// </summary>
        public float? Temperature { get; set; }
        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling,
        /// where the model considers the results of the tokens with top_p probability
        /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
        /// are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        /// </summary>
        public float? TopP { get; set; }
        /// <summary> Gets or sets the reasoning. </summary>
        public Reasoning Reasoning { get; set; }
        /// <summary>
        /// An array of tools the model may call while generating a response. You
        /// can specify which tool to use by setting the `tool_choice` parameter.
        /// Please note <see cref="Tool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CaptureSemanticEventsTool"/>, <see cref="CaptureStructuredOutputsTool"/>, <see cref="CodeInterpreterTool"/>, <see cref="ComputerUsePreviewTool"/>, <see cref="FileSearchTool"/>, <see cref="FunctionTool"/>, <see cref="ImageGenTool"/>, <see cref="LocalShellTool"/>, <see cref="MCPTool"/> and <see cref="WebSearchPreviewTool"/>.
        /// </summary>
        public IList<Tool> Tools { get; }
        /// <summary> Configuration options for a text response from the model. Can be plain text or structured JSON data. </summary>
        public PromptAgentDefinitionText Text { get; set; }
        /// <summary> Set of structured inputs that can participate in prompt template substitution or tool argument bindings. </summary>
        public IDictionary<string, StructuredInputDefinition> StructuredInputs { get; }
    }
}
